/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Identify an admin
         * @description
         *     You can view the currently authorised admin along with the embedded app object (a "workspace" in legacy terminology).
         *
         *     > 🚧 Single Sign On
         *     >
         *     > If you are building a custom "Log in with Intercom" flow for your site, and you call the `/me` endpoint to identify the logged-in user, you should not accept any sign-ins from users with unverified email addresses as it poses a potential impersonation security risk.
         *
         */
        get: operations["identifyAdmin"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/admins/{id}/away": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Set an admin to away
         * @description You can set an Admin as away for the Inbox.
         */
        put: operations["setAwayAdmin"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/admins/activity_logs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all activity logs
         * @description You can get a log of activities by all admins in an app.
         */
        get: operations["listActivityLogs"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/admins": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all admins
         * @description You can fetch a list of admins for a given workspace.
         */
        get: operations["listAdmins"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/admins/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve an admin
         * @description You can retrieve the details of a single admin.
         */
        get: operations["retrieveAdmin"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ai/content_import_sources": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List content import sources
         * @description You can retrieve a list of all content import sources for a workspace.
         */
        get: operations["listContentImportSources"];
        put?: never;
        /**
         * Create a content import source
         * @description You can create a new content import source by sending a POST request to this endpoint.
         */
        post: operations["createContentImportSource"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ai/content_import_sources/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The unique identifier for the content import source which is given by Intercom. */
                id: string;
            };
            cookie?: never;
        };
        /** Retrieve a content import source */
        get: operations["getContentImportSource"];
        /**
         * Update a content import source
         * @description You can update an existing content import source.
         */
        put: operations["updateContentImportSource"];
        post?: never;
        /**
         * Delete a content import source
         * @description You can delete a content import source by making a DELETE request this endpoint. This will also delete all external pages that were imported from this source.
         */
        delete: operations["deleteContentImportSource"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ai/external_pages": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List external pages
         * @description You can retrieve a list of all external pages for a workspace.
         */
        get: operations["listExternalPages"];
        put?: never;
        /**
         * Create an external page (or update an external page by external ID)
         * @description You can create a new external page by sending a POST request to this endpoint. If an external page already exists with the specified source_id and external_id, it will be updated instead.
         */
        post: operations["createExternalPage"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ai/external_pages/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The unique identifier for the external page which is given by Intercom. */
                id: string;
            };
            cookie?: never;
        };
        /**
         * Retrieve an external page
         * @description You can retrieve an external page.
         */
        get: operations["getExternalPage"];
        /**
         * Update an external page
         * @description You can update an existing external page (if it was created via the API).
         */
        put: operations["updateExternalPage"];
        post?: never;
        /**
         * Delete an external page
         * @description Sending a DELETE request for an external page will remove it from the content library UI and from being used for AI answers.
         */
        delete: operations["deleteExternalPage"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/articles": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all articles
         * @description You can fetch a list of all articles by making a GET request to `https://api.intercom.io/articles`.
         *
         *     > 📘 How are the articles sorted and ordered?
         *     >
         *     > Articles will be returned in descending order on the `updated_at` attribute. This means if you need to iterate through results then we'll show the most recently updated articles first.
         *
         */
        get: operations["listArticles"];
        put?: never;
        /**
         * Create an article
         * @description You can create a new article by making a POST request to `https://api.intercom.io/articles`.
         */
        post: operations["createArticle"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/articles/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve an article
         * @description You can fetch the details of a single article by making a GET request to `https://api.intercom.io/articles/<id>`.
         */
        get: operations["retrieveArticle"];
        /**
         * Update an article
         * @description You can update the details of a single article by making a PUT request to `https://api.intercom.io/articles/<id>`.
         */
        put: operations["updateArticle"];
        post?: never;
        /**
         * Delete an article
         * @description You can delete a single article by making a DELETE request to `https://api.intercom.io/articles/<id>`.
         */
        delete: operations["deleteArticle"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/articles/search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Search for articles
         * @description You can search for articles by making a GET request to `https://api.intercom.io/articles/search`.
         */
        get: operations["searchArticles"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/help_center/collections": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all collections
         * @description You can fetch a list of all collections by making a GET request to `https://api.intercom.io/help_center/collections`.
         *
         *     > 📘 How are the collections sorted and ordered?
         *     >
         *     > Collections will be returned in descending order on the `updated_at` attribute. This means if you need to iterate through results then we'll show the most recently updated collections first.
         *
         */
        get: operations["listAllCollections"];
        put?: never;
        /**
         * Create a collection
         * @description You can create a new collection by making a POST request to `https://api.intercom.io/help_center/collections.`
         */
        post: operations["createCollection"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/help_center/collections/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve a collection
         * @description You can fetch the details of a single collection by making a GET request to `https://api.intercom.io/help_center/collections/<id>`.
         */
        get: operations["retrieveCollection"];
        /**
         * Update a collection
         * @description You can update the details of a single collection by making a PUT request to `https://api.intercom.io/collections/<id>`.
         */
        put: operations["updateCollection"];
        post?: never;
        /**
         * Delete a collection
         * @description You can delete a single collection by making a DELETE request to `https://api.intercom.io/collections/<id>`.
         */
        delete: operations["deleteCollection"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/help_center/help_centers/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve a Help Center
         * @description You can fetch the details of a single Help Center by making a GET request to `https://api.intercom.io/help_center/help_center/<id>`.
         */
        get: operations["retrieveHelpCenter"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/help_center/help_centers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all Help Centers
         * @description You can list all Help Centers by making a GET request to `https://api.intercom.io/help_center/help_centers`.
         */
        get: operations["listHelpCenters"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/companies": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve a company
         * @description You can fetch a company by either passing in `company_id` or `name` as a query parameter.
         *
         *     A company can also be fetched by its name using a name or company_id parameter in the url, whose values are the ones you have defined for that company -
         *       `https://api.intercom.io/companies?name={name}`
         *       `https://api.intercom.io/companies?company_id={company_id}`
         *
         */
        get: operations["retrieveCompany"];
        put?: never;
        /**
         * Create or Update a company
         * @description You can create or update a company.
         *
         *     > 📘 Companies with no users
         *     >
         *     > Companies will be only visible in Intercom when there is at least one associated user.
         *
         *     Companies are looked up via `company_id` in a `POST` request, if not found via `company_id`, the new company will be created, if found, that company will be updated.
         *
         */
        post: operations["createOrUpdateCompany"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/companies/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve a company by ID
         * @description You can fetch a single company.
         */
        get: operations["RetrieveACompanyById"];
        /**
         * Update a company
         * @description You can update a single company
         */
        put: operations["UpdateCompany"];
        post?: never;
        /**
         * Delete a company
         * @description You can delete a single company.
         */
        delete: operations["deleteCompany"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/companies/{id}/contacts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List attached contacts
         * @description You can fetch a list of all contacts that belong to a company.
         */
        get: operations["ListAttachedContacts"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/companies/{id}/segments": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List attached segments for companies
         * @description You can fetch a list of all segments that belong to a company.
         */
        get: operations["ListAttachedSegmentsForCompanies"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/companies/list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * List all companies
         * @description You can list companies. The company list is sorted by the `last_request_at` field and by default is ordered descending, most recently requested first.
         *
         *     Note that the API does not include companies who have no associated users in list responses.
         *
         *     > 📘
         *     >
         *     > When using the Companies endpoint and the pages object to iterate through the returned companies, there is a limit of 10,000 Companies that can be returned. If you need to list or iterate on more than 10,000 Companies, please use the [Scroll API](https://developers.intercom.com/reference#iterating-over-all-companies).
         *
         */
        post: operations["listAllCompanies"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/companies/scroll": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Scroll over all companies
         * @description       The `list all companies` functionality does not work well for huge datasets, and can result in errors and performance problems when paging deeply. The Scroll API provides an efficient mechanism for iterating over all companies in a dataset.
         *
         *     - Each app can only have 1 scroll open at a time. You'll get an error message if you try to have more than one open per app.
         *     - If the scroll isn't used for 1 minute, it expires and calls with that scroll param will fail
         *     - If the end of the scroll is reached, "companies" will be empty and the scroll parameter will expire
         *
         *     > 📘 Scroll Parameter
         *     >
         *     > You can get the first page of companies by simply sending a GET request to the scroll endpoint. For subsequent requests you will need to use the scroll parameter from the response.
         *
         *     > ❗️ Scroll network timeouts
         *     >
         *     > Since scroll is often used on large datasets network errors such as timeouts can be encountered. When this occurs you will need to restart your scroll query as it is not possible to continue from a specific point when using scroll.
         *     >
         *     > When this occurs you will see a HTTP 500 error with the following message:
         *     > "Request failed due to an internal network error. Please restart the scroll operation."
         *
         */
        get: operations["scrollOverAllCompanies"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/contacts/{id}/companies": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List attached companies for contact
         * @description You can fetch a list of companies that are associated to a contact.
         */
        get: operations["listCompaniesForAContact"];
        put?: never;
        /**
         * Attach a Contact to a Company
         * @description You can attach a company to a single contact.
         */
        post: operations["attachContactToACompany"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/contacts/{contact_id}/companies/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Detach a contact from a company
         * @description You can detach a company from a single contact.
         */
        delete: operations["detachContactFromACompany"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/contacts/{id}/notes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all notes
         * @description You can fetch a list of notes that are associated to a contact.
         */
        get: operations["listNotes"];
        put?: never;
        /**
         * Create a note
         * @description You can add a note to a single contact.
         */
        post: operations["createNote"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/contacts/{contact_id}/segments": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List attached segments for contact
         * @description You can fetch a list of segments that are associated to a contact.
         */
        get: operations["listSegmentsForAContact"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/contacts/{contact_id}/subscriptions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List subscriptions for a contact
         * @description You can fetch a list of subscription types that are attached to a contact. These can be subscriptions that a user has 'opted-in' to or has 'opted-out' from, depending on the subscription type.
         *     This will return a list of Subscription Type objects that the contact is associated with.
         *
         *     The data property will show a combined list of:
         *
         *       1.Opt-out subscription types that the user has opted-out from.
         *       2.Opt-in subscription types that the user has opted-in to receiving.
         *
         */
        get: operations["listSubscriptionsForAContact"];
        put?: never;
        /**
         * Add subscription to a contact
         * @description You can add a specific subscription to a contact. In Intercom, we have two different subscription types based on user consent - opt-out and opt-in:
         *
         *       1.Attaching a contact to an opt-out subscription type will opt that user out from receiving messages related to that subscription type.
         *
         *       2.Attaching a contact to an opt-in subscription type will opt that user in to receiving messages related to that subscription type.
         *
         *     This will return a subscription type model for the subscription type that was added to the contact.
         *
         */
        post: operations["attachSubscriptionTypeToContact"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/contacts/{contact_id}/subscriptions/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Remove subscription from a contact
         * @description You can remove a specific subscription from a contact. This will return a subscription type model for the subscription type that was removed from the contact.
         */
        delete: operations["detachSubscriptionTypeToContact"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/contacts/{contact_id}/tags": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List tags attached to a contact
         * @description You can fetch a list of all tags that are attached to a specific contact.
         */
        get: operations["listTagsForAContact"];
        put?: never;
        /**
         * Add tag to a contact
         * @description You can tag a specific contact. This will return a tag object for the tag that was added to the contact.
         */
        post: operations["attachTagToContact"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/contacts/{contact_id}/tags/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Remove tag from a contact
         * @description You can remove tag from a specific contact. This will return a tag object for the tag that was removed from the contact.
         */
        delete: operations["detachTagFromContact"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/contacts/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a contact
         * @description You can fetch the details of a single contact.
         */
        get: operations["ShowContact"];
        /**
         * Update a contact
         * @description You can update an existing contact (ie. user or lead).
         */
        put: operations["UpdateContact"];
        post?: never;
        /**
         * Delete a contact
         * @description You can delete a single contact.
         */
        delete: operations["DeleteContact"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/contacts/merge": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Merge a lead and a user
         * @description You can merge a contact with a `role` of `lead` into a contact with a `role` of `user`.
         */
        post: operations["MergeContact"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/contacts/search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Search contacts
         * @description You can search for multiple contacts by the value of their attributes in order to fetch exactly who you want.
         *
         *     To search for contacts, you need to send a POST request to `https://api.intercom.io/contacts/search`. This will accept a query object in the body which will define your filters in order to search for contacts.
         *
         *     > 🚧 Why is there a delay when creating contacts and searching for them?
         *     >
         *     > If a contact has recently been created, there is a possibility that it will not yet be available when searching. This means that it may not appear in the response. This delay can take a few minutes. If you need to be instantly notified then you could use webhooks instead, which you'd currently have to iterate on to see if they match your search filters.
         *
         *     > 🚧 Nesting & Limitations
         *     >
         *     > You can nest these filters in order to get even more granular insights that pinpoint exactly what you need. Example: (1 OR 2) AND (3 OR 4).
         *     > There are some limitations to the amount of multiple's there can be:
         *     > * There's a limit of max 2 nested filters
         *     > * There's a limit of max 15 filters for each AND or OR group
         *
         *     > 🚧 Searching for Timestamp Fields
         *
         *     > All timestamp fields (created_at, updated_at etc.) are indexed as Dates for Contact Search queries; Datetime queries are not currently supported. This means you can only query for timestamp fields by day - not hour, minute or second.
         *     > For example, if you search for all Contacts with a created_at value greater (>) than 1577869200 (the UNIX timestamp for January 1st, 2020 9:00 AM), that will be interpreted as 1577836800 (January 1st, 2020 12:00 AM). The search results will then include Contacts created from January 2nd, 2020 12:00 AM onwards.
         *     > If you'd like to get contacts created on January 1st, 2020 you should search with a created_at value equal (=) to 1577836800 (January 1st, 2020 12:00 AM).
         *     > This behaviour applies only to timestamps used in search queries. The search results will still contain the full UNIX timestamp and be sorted accordingly.
         *
         *     ### Accepted Fields
         *
         *     Most key listed as part of the Contacts Model are searchable, whether writeable or not. The value you search for has to match the accepted type, otherwise the query will fail (ie. as `created_at` accepts a date, the `value` cannot be a string such as `"foorbar"`).
         *
         *     | Field                              | Type                           |
         *     | ---------------------------------- | ------------------------------ |
         *     | id                                 | String                         |
         *     | role                               | String<br>Accepts user or lead |
         *     | name                               | String                         |
         *     | avatar                             | String                         |
         *     | owner_id                           | Integer                        |
         *     | email                              | String                         |
         *     | phone                              | String                         |
         *     | formatted_phone                    | String                         |
         *     | external_id                        | String                         |
         *     | created_at                         | Date (UNIX Timestamp)          |
         *     | signed_up_at                       | Date (UNIX Timestamp)          |
         *     | updated_at                         | Date (UNIX Timestamp)          |
         *     | last_seen_at                       | Date (UNIX Timestamp)          |
         *     | last_contacted_at                  | Date (UNIX Timestamp)          |
         *     | last_replied_at                    | Date (UNIX Timestamp)          |
         *     | last_email_opened_at               | Date (UNIX Timestamp)          |
         *     | last_email_clicked_at              | Date (UNIX Timestamp)          |
         *     | language_override                  | String                         |
         *     | browser                            | String                         |
         *     | browser_language                   | String                         |
         *     | os                                 | String                         |
         *     | location.country                   | String                         |
         *     | location.region                    | String                         |
         *     | location.city                      | String                         |
         *     | unsubscribed_from_emails           | Boolean                        |
         *     | marked_email_as_spam               | Boolean                        |
         *     | has_hard_bounced                   | Boolean                        |
         *     | ios_last_seen_at                   | Date (UNIX Timestamp)          |
         *     | ios_app_version                    | String                         |
         *     | ios_device                         | String                         |
         *     | ios_app_device                     | String                         |
         *     | ios_os_version                     | String                         |
         *     | ios_app_name                       | String                         |
         *     | ios_sdk_version                    | String                         |
         *     | android_last_seen_at               | Date (UNIX Timestamp)          |
         *     | android_app_version                | String                         |
         *     | android_device                     | String                         |
         *     | android_app_name                   | String                         |
         *     | andoid_sdk_version                 | String                         |
         *     | segment_id                         | String                         |
         *     | tag_id                             | String                         |
         *     | custom_attributes.{attribute_name} | String                         |
         *
         *
         */
        post: operations["SearchContacts"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/contacts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all contacts
         * @description You can fetch a list of all contacts.
         */
        get: operations["ListContacts"];
        put?: never;
        /**
         * Create contact
         * @description You can create a new contact (ie. user or lead).
         */
        post: operations["CreateContact"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/contacts/{id}/archive": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Archive contact
         * @description You can archive a single contact.
         */
        post: operations["ArchiveContact"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/contacts/{id}/unarchive": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Unarchive contact
         * @description You can unarchive a single contact.
         */
        post: operations["UnarchiveContact"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/conversations/{conversation_id}/tags": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Add tag to a conversation
         * @description You can tag a specific conversation. This will return a tag object for the tag that was added to the conversation.
         */
        post: operations["attachTagToConversation"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/conversations/{conversation_id}/tags/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Remove tag from a conversation
         * @description You can remove tag from a specific conversation. This will return a tag object for the tag that was removed from the conversation.
         */
        delete: operations["detachTagFromConversation"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/conversations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all conversations
         * @description You can fetch a list of all conversations.
         *
         *     You can optionally request the result page size and the cursor to start after to fetch the result
         *
         */
        get: operations["listConversations"];
        put?: never;
        /**
         * Creates a conversation
         * @description You can create a conversation that has been initiated by a contact (ie. user or lead).
         *     The conversation can be an in-app message only.
         *
         *     > 📘 Sending for visitors
         *     >
         *     > You can also send a message from a visitor by specifying their `user_id` or `id` value in the `from` field, along with a `type` field value of `contact`.
         *     > This visitor will be automatically converted to a contact with a lead role once the conversation is created.
         *
         *     This will return the Message model that has been created.
         *
         *
         */
        post: operations["createConversation"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/conversations/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve a conversation
         * @description
         *     You can fetch the details of a single conversation.
         *
         *     This will return a single Conversation model with all its conversation parts.
         *
         *     > 🚧 Hard limit of 500 parts
         *     >
         *     > The maximum number of conversation parts that can be returned via the API is 500. If you have more than that we will return the 500 most recent conversation parts.
         *
         *     > 📘 Bot name in conversation parts
         *     >
         *     > For conversation parts generated by a bot, bot name will depend on the following:
         *     - Customers that never turned on AI answers will have `operator` as the bot name
         *     - Customers that have turned on AI answers at some point will have `fin` as the bot name
         *
         */
        get: operations["retrieveConversation"];
        /**
         * Update a conversation
         * @description
         *     You can update an existing conversation.
         *
         *     > 📘
         *     >
         *     > If you want to update a conversation with either a reply (or actions such as assign, unassign, open, close or snooze) then take a look at their own sections respectively as they currently require different endpoints and parameters.
         *
         *
         */
        put: operations["updateConversation"];
        post?: never;
        /**
         * Delete a conversation
         * @description You can delete a single conversation.
         */
        delete: operations["deleteConversation"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/conversations/search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Search conversations
         * @description You can search for multiple conversations by the value of their attributes in order to fetch exactly which ones you want.
         *
         *     To search for conversations, you need to send a POST request to https://api.intercom.io/conversations/search. This will accept a query object in the body which will define your filters in order to search for conversations.
         *
         *     > 🚧 Nesting & Limitations
         *     >
         *     > You can nest these filters in order to get even more granular insights that pinpoint exactly what you need. Example: (1 OR 2) AND (3 OR 4).
         *     > There are some limitations to the amount of multiple's there can be:
         *     > - There's a limit of max 2 nested filters
         *     > - There's a limit of max 15 filters for each AND or OR group
         *
         *     ### Accepted Fields
         *
         *     Most keys listed as part of the The conversation model is searchable, whether writeable or not. The value you search for has to match the accepted type, otherwise the query will fail (ie. as `created_at` accepts a date, the `value` cannot be a string such as `"foorbar"`).
         *
         *     | Field                                     | Type                                                                                     |
         *     | :---------------------------------------- | :--------------------------------------------------------------------------------------- |
         *     | id                                        | String                                                                                   |
         *     | created_at                                | Date (UNIX timestamp)                                                                    |
         *     | updated_at                                | Date (UNIX timestamp)                                                                    |
         *     | source.type                               | String                                                                                   |
         *     | source.id                                 | String                                                                                   |
         *     | source.delivered_as                       | String                                                                                   |
         *     | source.subject                            | String                                                                                   |
         *     | source.body                               | String                                                                                   |
         *     | source.author.id                          | String                                                                                   |
         *     | source.author.type                        | String                                                                                   |
         *     | source.author.name                        | String                                                                                   |
         *     | source.author.email                       | String                                                                                   |
         *     | source.url                                | String                                                                                   |
         *     | contact_ids                               | String                                                                                   |
         *     | teammate_ids                              | String                                                                                   |
         *     | admin_assignee_id                         | String                                                                                   |
         *     | team_assignee_id                          | String                                                                                   |
         *     | channel_initiated                         | String<br>Accepted fields are `conversation`, `push`, `facebook`, `twitter` and `email`. |
         *     | open                                      | Boolean                                                                                  |
         *     | read                                      | Boolean                                                                                  |
         *     | state                                     | String                                                                                   |
         *     | waiting_since                             | Date (UNIX timestamp)                                                                    |
         *     | snoozed_until                             | Date (UNIX timestamp)                                                                    |
         *     | tag_ids                                   | String                                                                                   |
         *     | priority                                  | String                                                                                   |
         *     | statistics.time_to_assignment             | Integer                                                                                  |
         *     | statistics.time_to_admin_reply            | Integer                                                                                  |
         *     | statistics.time_to_first_close            | Integer                                                                                  |
         *     | statistics.time_to_last_close             | Integer                                                                                  |
         *     | statistics.median_time_to_reply           | Integer                                                                                  |
         *     | statistics.first_contact_reply_at         | Date (UNIX timestamp)                                                                    |
         *     | statistics.first_assignment_at            | Date (UNIX timestamp)                                                                    |
         *     | statistics.first_admin_reply_at           | Date (UNIX timestamp)                                                                    |
         *     | statistics.first_close_at                 | Date (UNIX timestamp)                                                                    |
         *     | statistics.last_assignment_at             | Date (UNIX timestamp)                                                                    |
         *     | statistics.last_assignment_admin_reply_at | Date (UNIX timestamp)                                                                    |
         *     | statistics.last_contact_reply_at          | Date (UNIX timestamp)                                                                    |
         *     | statistics.last_admin_reply_at            | Date (UNIX timestamp)                                                                    |
         *     | statistics.last_close_at                  | Date (UNIX timestamp)                                                                    |
         *     | statistics.last_closed_by_id              | String                                                                                   |
         *     | statistics.count_reopens                  | Integer                                                                                  |
         *     | statistics.count_assignments              | Integer                                                                                  |
         *     | statistics.count_conversation_parts       | Integer                                                                                  |
         *     | conversation_rating.requested_at          | Date (UNIX timestamp)                                                                    |
         *     | conversation_rating.replied_at            | Date (UNIX timestamp)                                                                    |
         *     | conversation_rating.score                 | Integer                                                                                  |
         *     | conversation_rating.remark                | String                                                                                   |
         *     | conversation_rating.contact_id            | String                                                                                   |
         *     | conversation_rating.admin_d               | String                                                                                   |
         *
         *
         */
        post: operations["searchConversations"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/conversations/{id}/reply": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Reply to a conversation
         * @description You can reply to a conversation with a message from an admin or on behalf of a contact, or with a note for admins.
         */
        post: operations["replyConversation"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/conversations/{id}/parts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Manage a conversation
         * @description You can close a conversation.
         *     You can snooze a conversation to reopen on a future date.
         *     You can open a conversation which is `snoozed` or `closed`.
         *     You can assign a conversation to an admin and/or team.
         *
         */
        post: operations["manageConversation"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/conversations/{id}/run_assignment_rules": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Run Assignment Rules on a conversation
         * @description You can let a conversation be automatically assigned following assignment rules.
         */
        post: operations["autoAssignConversation"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/conversations/{id}/customers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Attach a contact to a conversation
         * @description You can add participants who are contacts to a conversation, on behalf of either another contact or an admin.
         *
         *     > 🚧 Note about contacts without an email
         *     >
         *     > If you add a contact via the email parameter and there is no user/lead found on that workspace with he given email, then we will create a new contact with `role` set to `lead`.
         *
         *
         */
        post: operations["attachContactToConversation"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/conversations/{conversation_id}/customers/{contact_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Detach a contact from a group conversation
         * @description You can add participants who are contacts to a conversation, on behalf of either another contact or an admin.
         *
         *     > 🚧 Note about contacts without an email
         *     >
         *     > If you add a contact via the email parameter and there is no user/lead found on that workspace with he given email, then we will create a new contact with `role` set to `lead`.
         *
         *
         */
        delete: operations["detachContactFromConversation"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/conversations/redact": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Redact a conversation part
         * @description You can redact a conversation part or the source message of a conversation (as seen in the source object).
         *
         *     > 📘 Which parts and source messages can I redact?
         *     >
         *     > If you are redacting a conversation part, it must have a `body`.
         *     > If you are redacting a source message, it must have been created by a contact.
         *     > We will return a `conversation_part_not_redactable` error if these criteria are not met.
         *
         *
         */
        post: operations["redactConversation"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/conversations/{id}/convert": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Convert a conversation to a ticket
         * @description You can convert a conversation to a ticket.
         */
        post: operations["convertConversationToTicket"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/data_attributes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all data attributes
         * @description You can fetch a list of all data attributes belonging to a workspace for contacts, companies or conversations.
         */
        get: operations["lisDataAttributes"];
        put?: never;
        /**
         * Create a data attribute
         * @description You can create a data attributes for a `contact` or a `company`.
         */
        post: operations["createDataAttribute"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/data_attributes/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Update a data attribute
         * @description
         *     You can update a data attribute.
         *
         *     > 🚧 Updating the data type is not possible
         *     >
         *     > It is currently a dangerous action to execute changing a data attribute's type via the API. You will need to update the type via the UI instead.
         *
         */
        put: operations["updateDataAttribute"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/events": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all data events
         * @description
         *     > 🚧
         *     >
         *     > Please note that you can only 'list' events that are less than 90 days old. Event counts and summaries will still include your events older than 90 days but you cannot 'list' these events individually if they are older than 90 days
         *
         *     The events belonging to a customer can be listed by sending a GET request to `https://api.intercom.io/events` with a user or lead identifier along with a `type` parameter. The identifier parameter can be one of `user_id`, `email` or `intercom_user_id`. The `type` parameter value must be `user`.
         *
         *     - `https://api.intercom.io/events?type=user&user_id={user_id}`
         *     - `https://api.intercom.io/events?type=user&email={email}`
         *     - `https://api.intercom.io/events?type=user&intercom_user_id={id}` (this call can be used to list leads)
         *
         *     The `email` parameter value should be [url encoded](http://en.wikipedia.org/wiki/Percent-encoding) when sending.
         *
         *     You can optionally define the result page size as well with the `per_page` parameter.
         *
         */
        get: operations["lisDataEvents"];
        put?: never;
        /**
         * Submit a data event
         * @description
         *     You will need an Access Token that has write permissions to send Events. Once you have a key you can submit events via POST to the Events resource, which is located at https://api.intercom.io/events, or you can send events using one of the client libraries. When working with the HTTP API directly a client should send the event with a `Content-Type` of `application/json`.
         *
         *     When using the JavaScript API, [adding the code to your app](http://docs.intercom.io/configuring-Intercom/tracking-user-events-in-your-app) makes the Events API available. Once added, you can submit an event using the `trackEvent` method. This will associate the event with the Lead or currently logged-in user or logged-out visitor/lead and send it to Intercom. The final parameter is a map that can be used to send optional metadata about the event.
         *
         *     With the Ruby client you pass a hash describing the event to `Intercom::Event.create`, or call the `track_user` method directly on the current user object (e.g. `user.track_event`).
         *
         *     | Type            | Description                                                                                                                                                                                                     | Example                                                                           |
         *     | :-------------- | :-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | :-------------------------------------------------------------------------------- |
         *     | String          | The value is a JSON String                                                                                                                                                                                      | `"source":"desktop"`                                                              |
         *     | Number          | The value is a JSON Number                                                                                                                                                                                      | `"load": 3.67`                                                                    |
         *     | Date            | The key ends with the String `_date` and the value is a [Unix timestamp](http://en.wikipedia.org/wiki/Unix_time), assumed to be in the [UTC](http://en.wikipedia.org/wiki/Coordinated_Universal_Time) timezone. | `"contact_date": 1392036272`                                                      |
         *     | Link            | The value is a HTTP or HTTPS URI.                                                                                                                                                                               | `"article": "https://example.org/ab1de.html"`                                     |
         *     | Rich Link       | The value is a JSON object that contains `url` and `value` keys.                                                                                                                                                | `"article": {"url": "https://example.org/ab1de.html", "value":"the dude abides"}` |
         *     | Monetary Amount | The value is a JSON object that contains `amount` and `currency` keys. The `amount` key is a positive integer representing the amount in cents. The price in the example to the right denotes €349.99.          | `"price": {"amount": 34999, "currency": "eur"}`                                   |
         *
         *     **NB: For the JSON object types, please note that we do not currently support nested JSON structure.**
         *
         *     > 🚧 Lead Events
         *     >
         *     > When submitting events for Leads, you will need to specify the Lead's `id`.
         *
         *     > 📘 Metadata behaviour
         *     >
         *     > - We currently limit the number of tracked metadata keys to 10 per event. Once the quota is reached, we ignore any further keys we receive. The first 10 metadata keys are determined by the order in which they are sent in with the event.
         *     > - It is not possible to change the metadata keys once the event has been sent. A new event will need to be created with the new keys and you can archive the old one.
         *     > - There might be up to 24 hrs delay when you send a new metadata for an existing event.
         *
         *     > 📘 Event de-duplication
         *     >
         *     > The API may detect and ignore duplicate events. Each event is uniquely identified as a combination of the following data - the Workspace identifier, the Contact external identifier, the Data Event name and the Data Event created time. As a result, it is **strongly recommended** to send a second granularity Unix timestamp in the `created_at` field.
         *     >
         *     > Duplicated events are responded to using the normal `202 Accepted` code - an error is not thrown, however repeat requests will be counted against any rate limit that is in place.
         *
         *     ### HTTP API Responses
         *
         *     - Successful responses to submitted events return `202 Accepted` with an empty body.
         *     - Unauthorised access will be rejected with a `401 Unauthorized` or `403 Forbidden` response code.
         *     - Events sent about users that cannot be found will return a `404 Not Found`.
         *     - Event lists containing duplicate events will have those duplicates ignored.
         *     - Server errors will return a `500` response code and may contain an error message in the body.
         *
         *
         */
        post: operations["createDataEvent"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/events/summaries": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create event summaries
         * @description Create event summaries for a user. Event summaries are used to track the number of times an event has occurred, the first time it occurred and the last time it occurred.
         *
         *
         */
        post: operations["dataEventSummaries"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/export/content/data": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create content data export
         * @description To create your export job, you need to send a `POST` request to the export endpoint `https://api.intercom.io/export/content/data`.
         *
         *     The only parameters you need to provide are the range of dates that you want exported.
         *
         *     >🚧 Limit of one active job
         *     >
         *     > You can only have one active job per workspace. You will receive a HTTP status code of 429 with the message Exceeded rate limit of 1 pending message data export jobs if you attempt to create a second concurrent job.
         *
         *     >❗️ Updated_at not included
         *     >
         *     > It should be noted that the timeframe only includes messages sent during the time period and not messages that were only updated during this period. For example, if a message was updated yesterday but sent two days ago, you would need to set the created_at_after date before the message was sent to include that in your retrieval job.
         *
         *     >📘 Date ranges are inclusive
         *     >
         *     > Requesting data for 2018-06-01 until 2018-06-30 will get all data for those days including those specified - e.g. 2018-06-01 00:00:00 until 2018-06-30 23:59:99.
         *
         */
        post: operations["createDataExport"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/export/content/data/{job_identifier}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Show content data export
         * @description You can view the status of your job by sending a `GET` request to the URL
         *     `https://api.intercom.io/export/content/data/{job_identifier}` - the `{job_identifier}` is the value returned in the response when you first created the export job. More on it can be seen in the Export Job Model.
         *
         *     > 🚧 Jobs expire after two days
         *     > All jobs that have completed processing (and are thus available to download from the provided URL) will have an expiry limit of two days from when the export ob completed. After this, the data will no longer be available.
         *
         */
        get: operations["getDataExport"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/export/cancel/{job_identifier}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Cancel content data export
         * @description You can cancel your job
         */
        post: operations["cancelDataExport"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/download/content/data/{job_identifier}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Download content data export
         * @description When a job has a status of complete, and thus a filled download_url, you can download your data by hitting that provided URL, formatted like so: https://api.intercom.io/download/content/data/xyz1234.
         *
         *     Your exported message data will be streamed continuously back down to you in a gzipped CSV format.
         *
         *     > 📘 Octet header required
         *     >
         *     > You will have to specify the header Accept: `application/octet-stream` when hitting this endpoint.
         *
         */
        get: operations["downloadDataExport"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/messages": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create a message
         * @description You can create a message that has been initiated by an admin. The conversation can be either an in-app message or an email.
         *
         *     > 🚧 Sending for visitors
         *     >
         *     > There can be a short delay between when a contact is created and when a contact becomes available to be messaged through the API. A 404 Not Found error will be returned in this case.
         *
         *     This will return the Message model that has been created.
         *
         *     > 🚧 Retrieving Associated Conversations
         *     >
         *     > As this is a message, there will be no conversation present until the contact responds. Once they do, you will have to search for a contact's conversations with the id of the message.
         *
         */
        post: operations["createMessage"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/news/news_items": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all news items
         * @description You can fetch a list of all news items
         */
        get: operations["listNewsItems"];
        put?: never;
        /**
         * Create a news item
         * @description You can create a news item
         */
        post: operations["createNewsItem"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/news/news_items/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve a news item
         * @description You can fetch the details of a single news item.
         */
        get: operations["retrieveNewsItem"];
        /** Update a news item */
        put: operations["updateNewsItem"];
        post?: never;
        /**
         * Delete a news item
         * @description You can delete a single news item.
         */
        delete: operations["deleteNewsItem"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/news/newsfeeds/{id}/items": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all live newsfeed items
         * @description You can fetch a list of all news items that are live on a given newsfeed
         */
        get: operations["listLiveNewsfeedItems"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/news/newsfeeds": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all newsfeeds
         * @description You can fetch a list of all newsfeeds
         */
        get: operations["listNewsfeeds"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/news/newsfeeds/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve a newsfeed
         * @description You can fetch the details of a single newsfeed
         */
        get: operations["retrieveNewsfeed"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/notes/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve a note
         * @description You can fetch the details of a single note.
         */
        get: operations["retrieveNote"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/segments": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all segments
         * @description You can fetch a list of all segments.
         */
        get: operations["listSegments"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/segments/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve a segment
         * @description You can fetch the details of a single segment.
         */
        get: operations["retrieveSegment"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/subscription_types": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List subscription types
         * @description You can list all subscription types. A list of subscription type objects will be returned.
         */
        get: operations["listSubscriptionTypes"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/phone_call_redirects": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create a phone Switch
         * @description You can use the API to deflect phone calls to the Intercom Messenger.
         *     Calling this endpoint will send an SMS with a link to the Messenger to the phone number specified.
         *
         *     If custom attributes are specified, they will be added to the user or lead's custom data attributes.
         *
         */
        post: operations["createPhoneSwitch"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tags": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all tags
         * @description You can fetch a list of all tags for a given workspace.
         *
         *
         */
        get: operations["listTags"];
        put?: never;
        /**
         * Create or update a tag, Tag or untag companies, Tag contacts
         * @description You can use this endpoint to perform the following operations:
         *
         *       **1. Create a new tag:** You can create a new tag by passing in the tag name as specified in "Create or Update Tag Request Payload" described below.
         *
         *       **2. Update an existing tag:** You can update an existing tag by passing the id of the tag as specified in "Create or Update Tag Request Payload" described below.
         *
         *       **3. Tag Companies:** You can tag single company or a list of companies. You can tag a company by passing in the tag name and the company details as specified in "Tag Company Request Payload" described below. Also, if the tag doesn't exist then a new one will be created automatically.
         *
         *       **4. Untag Companies:** You can untag a single company or a list of companies. You can untag a company by passing in the tag id and the company details as specified in "Untag Company Request Payload" described below.
         *
         *       **5. Tag Multiple Users:** You can tag a list of users. You can tag the users by passing in the tag name and the user details as specified in "Tag Users Request Payload" described below.
         *
         *     Each operation will return a tag object.
         *
         */
        post: operations["createTag"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tags/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Find a specific tag
         * @description You can fetch the details of tags that are on the workspace by their id.
         *     This will return a tag object.
         *
         */
        get: operations["findTag"];
        put?: never;
        post?: never;
        /**
         * Delete tag
         * @description You can delete the details of tags that are on the workspace by passing in the id.
         */
        delete: operations["deleteTag"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/teams": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all teams
         * @description This will return a list of team objects for the App.
         */
        get: operations["listTeams"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/teams/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve a team
         * @description You can fetch the details of a single team, containing an array of admins that belong to this team.
         */
        get: operations["retrieveTeam"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ticket_types/{ticket_type_id}/attributes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create a new attribute for a ticket type
         * @description You can create a new attribute for a ticket type.
         */
        post: operations["createTicketTypeAttribute"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ticket_types/{ticket_type_id}/attributes/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Update an existing attribute for a ticket type
         * @description You can update an existing attribute for a ticket type.
         */
        put: operations["updateTicketTypeAttribute"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ticket_types": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all ticket types
         * @description You can get a list of all ticket types for a workspace.
         */
        get: operations["listTicketTypes"];
        put?: never;
        /**
         * Create a ticket type
         * @description You can create a new ticket type.
         *     > 📘 Creating ticket types.
         *     >
         *     > Every ticket type will be created with two default attributes: _default_title_ and _default_description_.
         *     > For the `icon` propery, use an emoji from [Twemoji Cheatsheet](https://twemoji-cheatsheet.vercel.app/)
         *
         */
        post: operations["createTicketType"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ticket_types/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve a ticket type
         * @description You can fetch the details of a single ticket type.
         */
        get: operations["getTicketType"];
        /**
         * Update a ticket type
         * @description
         *     You can update a ticket type.
         *
         *     > 📘 Updating a ticket type.
         *     >
         *     > For the `icon` propery, use an emoji from [Twemoji Cheatsheet](https://twemoji-cheatsheet.vercel.app/)
         *
         */
        put: operations["updateTicketType"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tickets/{id}/reply": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Reply to a ticket
         * @description You can reply to a ticket with a message from an admin or on behalf of a contact, or with a note for admins.
         */
        post: operations["replyTicket"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tickets/{ticket_id}/tags": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Add tag to a ticket
         * @description You can tag a specific ticket. This will return a tag object for the tag that was added to the ticket.
         */
        post: operations["attachTagToTicket"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tickets/{ticket_id}/tags/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Remove tag from a ticket
         * @description You can remove tag from a specific ticket. This will return a tag object for the tag that was removed from the ticket.
         */
        delete: operations["detachTagFromTicket"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tickets": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create a ticket
         * @description You can create a new ticket.
         */
        post: operations["createTicket"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tickets/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve a ticket
         * @description You can fetch the details of a single ticket.
         */
        get: operations["getTicket"];
        /**
         * Update a ticket
         * @description You can update a ticket.
         */
        put: operations["updateTicket"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tickets/search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Search tickets
         * @description You can search for multiple tickets by the value of their attributes in order to fetch exactly which ones you want.
         *
         *     To search for tickets, you send a POST request to https://api.intercom.io/tickets/search. This will accept a query object in the body which will define your filters.
         *
         *     > 🚧 Nesting & Limitations
         *     >
         *     > You can nest these filters in order to get even more granular insights that pinpoint exactly what you need. Example: (1 OR 2) AND (3 OR 4).
         *     > There are some limitations to the amount of multiples there can be:
         *     > - There's a limit of max 2 nested filters
         *     > - There's a limit of max 15 filters for each AND or OR group
         *
         *     ### Accepted Fields
         *
         *     Most keys listed as part of the Ticket model are searchable, whether writeable or not. The value you search for has to match the accepted type, otherwise the query will fail (ie. as `created_at` accepts a date, the `value` cannot be a string such as `"foobar"`).
         *
         *     | Field                                     | Type                                                                                     |
         *     | :---------------------------------------- | :--------------------------------------------------------------------------------------- |
         *     | id                                        | String                                                                                   |
         *     | created_at                                | Date (UNIX timestamp)                                                                    |
         *     | updated_at                                | Date (UNIX timestamp)                                                                    |
         *     | title                                     | String                                                                                   |
         *     | description                               | String                                                                                   |
         *     | category                                  | String                                                                                   |
         *     | ticket_type_id                            | String                                                                                   |
         *     | contact_ids                               | String                                                                                   |
         *     | teammate_ids                              | String                                                                                   |
         *     | admin_assignee_id                         | String                                                                                   |
         *     | team_assignee_id                          | String                                                                                   |
         *     | open                                      | Boolean                                                                                  |
         *     | state                                     | String                                                                                   |
         *     | snoozed_until                             | Date (UNIX timestamp)                                                                    |
         *     | ticket_attribute.{id}                     | String or Boolean or Date (UNIX timestamp) or Float or Integer                           |
         *
         *
         */
        post: operations["searchTickets"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/visitors": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve a visitor with User ID
         * @description You can fetch the details of a single visitor.
         */
        get: operations["retrieveVisitorWithUserId"];
        /**
         * Update a visitor
         * @description Sending a PUT request to `/visitors` will result in an update of an existing Visitor.
         *
         *     **Option 1.** You can update a visitor by passing in the `user_id` of the visitor in the Request body.
         *
         *     **Option 2.** You can update a visitor by passing in the `id` of the visitor in the Request body.
         *
         */
        put: operations["updateVisitor"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/visitors/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve a visitor with ID
         * @description You can fetch the details of a single visitor.
         */
        get: operations["retrieveVisitor"];
        put?: never;
        post?: never;
        /**
         * Delete a visitor
         * @description You can delete a single visitor.
         */
        delete: operations["deleteVisitor"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/visitors/convert": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Convert a visitor
         * @description You can merge a Visitor to a Contact of role type `lead` or `user`.
         *
         *     > 📘 What happens upon a visitor being converted?
         *     >
         *     > If the User exists, then the Visitor will be merged into it, the Visitor deleted and the User returned. If the User does not exist, the Visitor will be converted to a User, with the User identifiers replacing it's Visitor identifiers.
         *
         */
        post: operations["convertVisitor"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /**
         * Activity Log
         * @description Activities performed by admins.
         */
        activity_log: {
            /**
             * @description The id representing the activity.
             * @example 6
             */
            id?: string;
            /** @description An object representing the admin who performed the activity. */
            performed_by?: {
                /**
                 * @description String representing the object's type. Always has the value `admin`.
                 * @example admin
                 */
                type?: string;
                /**
                 * @description The id representing the admin.
                 * @example 1295
                 */
                id?: string;
                /**
                 * @description The email of the admin.
                 * @example john@example.com
                 */
                email?: string;
                /**
                 * @description The IP address of the admin.
                 * @example 198.51.100.255
                 */
                ip?: string;
            };
            metadata?: Record<string, never>;
            /**
             * Format: date-time
             * @description The time the activity was created.
             * @example 1671028894
             */
            created_at?: number;
            /**
             * @example app_name_change
             * @enum {string}
             */
            activity_type?: "admin_assignment_limit_change" | "admin_away_mode_change" | "admin_deletion" | "admin_deprovisioned" | "admin_impersonation_end" | "admin_impersonation_start" | "admin_invite_change" | "admin_invite_creation" | "admin_invite_deletion" | "admin_login_failure" | "admin_login_success" | "admin_logout" | "admin_password_reset_request" | "admin_password_reset_success" | "admin_permission_change" | "admin_provisioned" | "admin_two_factor_auth_change" | "admin_unauthorized_sign_in_method" | "app_admin_join" | "app_authentication_method_change" | "app_data_deletion" | "app_data_export" | "app_google_sso_domain_change" | "app_identity_verification_change" | "app_name_change" | "app_outbound_address_change" | "app_package_installation" | "app_package_token_regeneration" | "app_package_uninstallation" | "app_team_creation" | "app_team_deletion" | "app_team_membership_modification" | "app_timezone_change" | "app_webhook_creation" | "app_webhook_deletion" | "articles_in_messenger_enabled_change" | "bulk_delete" | "bulk_export" | "campaign_deletion" | "campaign_state_change" | "conversation_part_deletion" | "conversation_topic_change" | "conversation_topic_creation" | "conversation_topic_deletion" | "help_center_settings_change" | "inbound_conversations_change" | "inbox_access_change" | "message_deletion" | "message_state_change" | "messenger_look_and_feel_change" | "messenger_search_required_change" | "messenger_spaces_change" | "office_hours_change" | "role_change" | "role_creation" | "role_deletion" | "ruleset_activation_title_preview" | "ruleset_creation" | "ruleset_deletion" | "search_browse_enabled_change" | "search_browse_required_change" | "seat_change" | "seat_revoke" | "security_settings_change" | "temporary_expectation_change" | "upfront_email_collection_change" | "welcome_message_change";
            /**
             * @description A sentence or two describing the activity.
             * @example Admin updated the app's name to "My App".
             */
            activity_description?: string;
        } | null;
        /**
         * Paginated Response
         * @description A paginated list of activity logs.
         */
        activity_log_list: {
            /**
             * @description String representing the object's type. Always has the value `activity_log.list`.
             * @example activity_log.list
             */
            type?: string;
            pages?: components["schemas"]["cursor_pages"];
            /** @description An array of activity logs */
            activity_logs?: components["schemas"]["activity_log"][];
        };
        /**
         * Addressable List
         * @description A list used to access other resources from a parent model.
         */
        addressable_list: {
            /**
             * Format: uri
             * @description The addressable object type
             * @example note
             */
            type?: string;
            /**
             * @description The id of the addressable object
             * @example 123
             */
            id?: string;
            /**
             * Format: uri
             * @description Url to get more company resources for this contact
             * @example /contacts/5ba682d23d7cf92bef87bfd4/notes
             */
            url?: string;
        };
        /**
         * Admin
         * @description Admins are teammate accounts that have access to a workspace.
         */
        admin: {
            /**
             * @description String representing the object's type. Always has the value `admin`.
             * @example admin
             */
            type?: string;
            /**
             * @description The id representing the admin.
             * @example 1295
             */
            id?: string;
            /**
             * @description The name of the admin.
             * @example Hoban Washburne
             */
            name?: string;
            /**
             * @description The email of the admin.
             * @example wash@serenity.io
             */
            email?: string;
            /**
             * @description The job title of the admin.
             * @example Philosopher
             */
            job_title?: string;
            /**
             * @description Identifies if this admin is currently set in away mode.
             * @example false
             */
            away_mode_enabled?: boolean;
            /**
             * @description Identifies if this admin is set to automatically reassign new conversations to the apps default inbox.
             * @example false
             */
            away_mode_reassign?: boolean;
            /**
             * @description Identifies if this admin has a paid inbox seat to restrict/allow features that require them.
             * @example true
             */
            has_inbox_seat?: boolean;
            /**
             * @description This object represents the avatar associated with the admin.
             * @example [
             *       814865
             *     ]
             */
            team_ids?: number[];
            /**
             * Format: uri
             * @description Image for the associated team or teammate
             * @example https://picsum.photos/200/300
             */
            avatar?: string | null;
            team_priority_level?: components["schemas"]["team_priority_level"];
        } | null;
        /**
         * Admins
         * @description A list of admins associated with a given workspace.
         */
        admin_list: {
            /**
             * @description String representing the object's type. Always has the value `admin.list`.
             * @example admin.list
             */
            type?: string;
            /** @description A list of admins associated with a given workspace. */
            admins?: components["schemas"]["admin"][];
        };
        /**
         * Admin Priority Level
         * @description Admin priority levels for the team
         */
        admin_priority_level: {
            /**
             * @description The primary admin ids for the team
             * @example [
             *       493881
             *     ]
             */
            primary_admin_ids?: number[] | null;
            /**
             * @description The secondary admin ids for the team
             * @example [
             *       814865
             *     ]
             */
            secondary_admin_ids?: number[] | null;
        } | null;
        /**
         * Admin Reply
         * @description Payload of the request to reply on behalf of an admin
         */
        admin_reply_conversation_request: {
            /**
             * @example comment
             * @enum {string}
             */
            message_type: "comment" | "note" | "quick_reply";
            /**
             * @example admin
             * @enum {string}
             */
            type: "admin";
            /**
             * @description The text body of the reply.\nNotes accept some HTML formatting.\nMust be present for comment and note message types.
             * @example Hello there!
             */
            body?: string;
            /**
             * @description The id of the admin who is authoring the comment.
             * @example 3156780
             */
            admin_id: string;
            /**
             * @description The time the reply was created. If not provided, the current time will be used.
             * @example 1590000000
             */
            created_at?: number;
            /**
             * Quick Reply Options
             * @description The quick reply options to display.\nMust be present for quick_reply message types.
             */
            reply_options?: {
                /** @description The text to display in this quick reply option. */
                text: string;
                /**
                 * Format: uuid
                 * @description A unique identifier for this quick reply option. This value will be available within the metadata of the comment conversation part that is created when a user clicks on this reply option.
                 */
                uuid: string;
            }[];
            /** @description A list of image URLs that will be added as attachments. You can include up to 5 URLs. */
            attachment_urls?: string[];
        };
        /**
         * Admin Reply on ticket
         * @description Payload of the request to reply on behalf of an admin
         */
        admin_reply_ticket_request: {
            /**
             * @example comment
             * @enum {string}
             */
            message_type: "comment" | "note" | "quick_reply";
            /**
             * @example admin
             * @enum {string}
             */
            type: "admin";
            /**
             * @description The text body of the reply.\nNotes accept some HTML formatting. Must be present for comment and note message types.
             * @example Hello there!
             */
            body?: string;
            /**
             * @description The id of the admin who is authoring the comment.
             * @example 3156780
             */
            admin_id: string;
            /**
             * @description The time the reply was created. If not provided, the current time will be used.
             * @example 1590000000
             */
            created_at?: number;
            /**
             * Quick Reply Options
             * @description The quick reply options to display. Must be present for quick_reply message types.
             */
            reply_options?: {
                /** @description The text to display in this quick reply option. */
                text: string;
                /**
                 * Format: uuid
                 * @description A unique identifier for this quick reply option. This value will be available within the metadata of the comment ticket part that is created when a user clicks on this reply option.
                 */
                uuid: string;
            }[];
            /** @description A list of image URLs that will be added as attachments. You can include up to 5 URLs. */
            attachment_urls?: string[];
        };
        /**
         * Admin
         * @description Admins are the teammate accounts that have access to a workspace
         */
        admin_with_app: {
            /**
             * @description String representing the object's type. Always has the value `admin`.
             * @example admin
             */
            type?: string;
            /**
             * @description The id representing the admin.
             * @example 1295
             */
            id?: string;
            /**
             * @description The name of the admin.
             * @example Hoban Washburne
             */
            name?: string;
            /**
             * @description The email of the admin.
             * @example wash@serenity.io
             */
            email?: string;
            /**
             * @description The job title of the admin.
             * @example Philosopher
             */
            job_title?: string;
            /**
             * @description Identifies if this admin is currently set in away mode.
             * @example false
             */
            away_mode_enabled?: boolean;
            /**
             * @description Identifies if this admin is set to automatically reassign new conversations to the apps default inbox.
             * @example false
             */
            away_mode_reassign?: boolean;
            /**
             * @description Identifies if this admin has a paid inbox seat to restrict/allow features that require them.
             * @example true
             */
            has_inbox_seat?: boolean;
            /**
             * @description This is a list of ids of the teams that this admin is part of.
             * @example [
             *       814865
             *     ]
             */
            team_ids?: number[];
            /** @description This object represents the avatar associated with the admin. */
            avatar?: {
                /**
                 * @description This is a string that identifies the type of the object. It will always have the value `avatar`.
                 * @default avatar
                 * @example avatar
                 */
                type: string;
                /**
                 * Format: uri
                 * @description This object represents the avatar associated with the admin.
                 * @example https://example.com/avatar.png
                 */
                image_url?: string | null;
            };
            /**
             * @description Identifies if this admin's email is verified.
             * @example true
             */
            email_verified?: boolean | null;
            /** @description App that the admin belongs to. */
            app?: components["schemas"]["app"];
        } | null;
        /**
         * App
         * @description App is a workspace on Intercom
         */
        app: {
            /**
             * @default app
             * @example app
             */
            type: string;
            /**
             * @description The id of the app.
             * @example xyz789
             */
            id_code?: string;
            /**
             * @description The name of the app.
             * @example ACME
             */
            name?: string;
            /**
             * @description The Intercom region the app is located in.
             * @example US
             */
            region?: string;
            /**
             * @description The timezone of the region where the app is located.
             * @example America/Los_Angeles
             */
            timezone?: string;
            /**
             * @description When the app was created.
             * @example 1671465577
             */
            created_at?: number;
            /**
             * @description Whether or not the app uses identity verification.
             * @example false
             */
            identity_verification?: boolean;
        } | null;
        /**
         * Article
         * @description The Articles API is a central place to gather all information and take actions on your articles. Articles can live within collections and sections, or alternatively they can stand alone.
         */
        article: {
            /**
             * @description The type of object - `article`.
             * @default article
             * @example article
             * @enum {string}
             */
            type: "article";
            /**
             * @description The unique identifier for the article which is given by Intercom.
             * @example 6871119
             */
            id?: string;
            /**
             * @description The id of the workspace which the article belongs to.
             * @example hfi1bx4l
             */
            workspace_id?: string;
            /**
             * @description The title of the article. For multilingual articles, this will be the title of the default language's content.
             * @example Default language title
             */
            title?: string;
            /**
             * @description The description of the article. For multilingual articles, this will be the description of the default language's content.
             * @example Default language description
             */
            description?: string | null;
            /**
             * @description The body of the article in HTML. For multilingual articles, this will be the body of the default language's content.
             * @example Default language body in html
             */
            body?: string | null;
            /**
             * @description The id of the author of the article. For multilingual articles, this will be the id of the author of the default language's content. Must be a teammate on the help center's workspace.
             * @example 5017691
             */
            author_id?: number;
            /**
             * @description Whether the article is `published` or is a `draft`. For multilingual articles, this will be the state of the default language's content.
             * @default draft
             * @example published
             * @enum {string}
             */
            state: "published" | "draft";
            /**
             * Format: date-time
             * @description The time when the article was created. For multilingual articles, this will be the timestamp of creation of the default language's content.
             * @example 1672928359
             */
            created_at?: number;
            /**
             * Format: date-time
             * @description The time when the article was last updated. For multilingual articles, this will be the timestamp of last update of the default language's content.
             * @example 1672928610
             */
            updated_at?: number;
            /**
             * @description The URL of the article. For multilingual articles, this will be the URL of the default language's content.
             * @example http://intercom.test/help/en/articles/3-default-language
             */
            url?: string | null;
            /**
             * @description The id of the article's parent collection or section. An article without this field stands alone.
             * @example 125685
             */
            parent_id?: number | null;
            /**
             * @description The ids of the article's parent collections or sections. An article without this field stands alone.
             * @example [
             *       18,
             *       19
             *     ]
             */
            parent_ids?: number[];
            /**
             * @description The type of parent, which can either be a `collection` or `section`.
             * @example collection
             */
            parent_type?: string | null;
            /**
             * @description The default locale of the help center. This field is only returned for multilingual help centers.
             * @example en
             */
            default_locale?: string;
            translated_content?: components["schemas"]["article_translated_content"];
            statistics?: components["schemas"]["article_statistics"];
        };
        /**
         * Article Content
         * @description The Content of an Article.
         */
        article_content: {
            /**
             * @description The type of object - `article_content` .
             * @example article_content
             * @enum {string|null}
             */
            type?: null | "article_content";
            /**
             * @description The title of the article.
             * @example How to create a new article
             */
            title?: string;
            /**
             * @description The description of the article.
             * @example This article will show you how to create a new article.
             */
            description?: string;
            /**
             * @description The body of the article.
             * @example This is the body of the article.
             */
            body?: string;
            /**
             * @description The ID of the author of the article.
             * @example 5017691
             */
            author_id?: number;
            /**
             * @description Whether the article is `published` or is a `draft` .
             * @example draft
             * @enum {string}
             */
            state?: "published" | "draft";
            /**
             * Format: date-time
             * @description The time when the article was created.
             * @example 1663597223
             */
            created_at?: number;
            /**
             * Format: date-time
             * @description The time when the article was last updated.
             * @example 1663597260
             */
            updated_at?: number;
            /**
             * @description The URL of the article.
             * @example http://intercom.test/help/en/articles/3-default-language
             */
            url?: string;
        } | null;
        /**
         * Articles
         * @description This will return a list of articles for the App.
         */
        article_list: {
            /**
             * @description The type of the object - `list`.
             * @example list
             * @enum {string}
             */
            type?: "list";
            pages?: components["schemas"]["cursor_pages"];
            /**
             * @description A count of the total number of articles.
             * @example 1
             */
            total_count?: number;
            /** @description An array of Article objects */
            data?: components["schemas"]["article"][];
        };
        /**
         * Article Search Highlights
         * @description The highlighted results of an Article search. In the examples provided my search query is always "my query".
         */
        article_search_highlights: {
            /**
             * @description The ID of the corresponding article.
             * @example 123
             */
            article_id?: string;
            /** @description An Article title highlighted. */
            highlighted_title?: {
                /**
                 * @description The type of text - `highlight` or `plain`.
                 * @example The highlight is
                 * @enum {string}
                 */
                type?: "highlight" | "plain";
                /**
                 * @description The text of the title.
                 * @example my query
                 */
                text?: string;
            }[];
            /** @description An Article description and body text highlighted. */
            highlighted_summary?: {
                /**
                 * @description The type of text - `highlight` or `plain`.
                 * @example How to highlight
                 * @enum {string}
                 */
                type?: "highlight" | "plain";
                /**
                 * @description The text of the title.
                 * @example my query
                 */
                text?: string;
            }[][];
        };
        /**
         * Article Search Response
         * @description The results of an Article search
         */
        article_search_response: {
            /**
             * @description The type of the object - `list`.
             * @example list
             * @enum {string}
             */
            type?: "list";
            /**
             * @description The total number of Articles matching the search query
             * @example 5
             */
            total_count?: number;
            /** @description An object containing the results of the search. */
            data?: {
                /** @description An array of Article objects */
                articles?: components["schemas"]["article"][];
                /** @description A corresponding array of highlighted Article content */
                highlights?: components["schemas"]["article_search_highlights"][];
            };
            pages?: components["schemas"]["cursor_pages"];
        };
        /**
         * Article Statistics
         * @description The statistics of an article.
         */
        article_statistics: {
            /**
             * @description The type of object - `article_statistics`.
             * @default article_statistics
             * @example article_statistics
             * @enum {string}
             */
            type: "article_statistics";
            /**
             * @description The number of total views the article has received.
             * @example 10
             */
            views?: number;
            /**
             * @description The number of conversations started from the article.
             * @example 0
             */
            conversions?: number;
            /**
             * @description The number of total reactions the article has received.
             * @example 10
             */
            reactions?: number;
            /**
             * @description The percentage of happy reactions the article has received against other types of reaction.
             * @example 40
             */
            happy_reaction_precentage?: number;
            /**
             * @description The percentage of neutral reactions the article has received against other types of reaction.
             * @example 40
             */
            netural_reaction_precentage?: number;
            /**
             * @description The percentage of sad reactions the article has received against other types of reaction.
             * @example 20
             */
            sad_reaction_precentage?: number;
        } | null;
        /**
         * Article Translated Content
         * @description The Translated Content of an Article. The keys are the locale codes and the values are the translated content of the article.
         */
        article_translated_content: {
            /**
             * @description The type of object - article_translated_content.
             * @example article_translated_content
             * @enum {string|null}
             */
            type?: null | "article_translated_content";
            /** @description The content of the article in Arabic */
            ar?: components["schemas"]["article_content"];
            /** @description The content of the article in Bulgarian */
            bg?: components["schemas"]["article_content"];
            /** @description The content of the article in Bosnian */
            bs?: components["schemas"]["article_content"];
            /** @description The content of the article in Catalan */
            ca?: components["schemas"]["article_content"];
            /** @description The content of the article in Czech */
            cs?: components["schemas"]["article_content"];
            /** @description The content of the article in Danish */
            da?: components["schemas"]["article_content"];
            /** @description The content of the article in German */
            de?: components["schemas"]["article_content"];
            /** @description The content of the article in Greek */
            el?: components["schemas"]["article_content"];
            /** @description The content of the article in English */
            en?: components["schemas"]["article_content"];
            /** @description The content of the article in Spanish */
            es?: components["schemas"]["article_content"];
            /** @description The content of the article in Estonian */
            et?: components["schemas"]["article_content"];
            /** @description The content of the article in Finnish */
            fi?: components["schemas"]["article_content"];
            /** @description The content of the article in French */
            fr?: components["schemas"]["article_content"];
            /** @description The content of the article in Hebrew */
            he?: components["schemas"]["article_content"];
            /** @description The content of the article in Croatian */
            hr?: components["schemas"]["article_content"];
            /** @description The content of the article in Hungarian */
            hu?: components["schemas"]["article_content"];
            /** @description The content of the article in Indonesian */
            id?: components["schemas"]["article_content"];
            /** @description The content of the article in Italian */
            it?: components["schemas"]["article_content"];
            /** @description The content of the article in Japanese */
            ja?: components["schemas"]["article_content"];
            /** @description The content of the article in Korean */
            ko?: components["schemas"]["article_content"];
            /** @description The content of the article in Lithuanian */
            lt?: components["schemas"]["article_content"];
            /** @description The content of the article in Latvian */
            lv?: components["schemas"]["article_content"];
            /** @description The content of the article in Mongolian */
            mn?: components["schemas"]["article_content"];
            /** @description The content of the article in Norwegian */
            nb?: components["schemas"]["article_content"];
            /** @description The content of the article in Dutch */
            nl?: components["schemas"]["article_content"];
            /** @description The content of the article in Polish */
            pl?: components["schemas"]["article_content"];
            /** @description The content of the article in Portuguese (Portugal) */
            pt?: components["schemas"]["article_content"];
            /** @description The content of the article in Romanian */
            ro?: components["schemas"]["article_content"];
            /** @description The content of the article in Russian */
            ru?: components["schemas"]["article_content"];
            /** @description The content of the article in Slovenian */
            sl?: components["schemas"]["article_content"];
            /** @description The content of the article in Serbian */
            sr?: components["schemas"]["article_content"];
            /** @description The content of the article in Swedish */
            sv?: components["schemas"]["article_content"];
            /** @description The content of the article in Turkish */
            tr?: components["schemas"]["article_content"];
            /** @description The content of the article in Vietnamese */
            vi?: components["schemas"]["article_content"];
            /** @description The content of the article in Portuguese (Brazil) */
            "pt-BR"?: components["schemas"]["article_content"];
            /** @description The content of the article in Chinese (China) */
            "zh-CN"?: components["schemas"]["article_content"];
            /** @description The content of the article in Chinese (Taiwan) */
            "zh-TW"?: components["schemas"]["article_content"];
        } | null;
        /**
         * Assign Conversation Request
         * @description Payload of the request to assign a conversation
         */
        assign_conversation_request: {
            /**
             * @example assignment
             * @enum {string}
             */
            message_type: "assignment";
            /**
             * @example admin
             * @enum {string}
             */
            type: "admin" | "team";
            /**
             * @description The id of the admin who is performing the action.
             * @example 12345
             */
            admin_id: string;
            /**
             * @description The `id`` of the `admin` or `team` which will be assigned the conversation.\nA conversation can be assigned both an admin and a team.\nSet `0` if you want this assign to no admin or team (ie. Unassigned).
             * @example 4324241
             */
            assignee_id: string;
            /**
             * @description Optionally you can send a response in the conversation when it is assigned.
             * @example Let me pass you over to one of my colleagues.
             */
            body?: string;
        };
        /**
         * Assign Conversation Request
         * @description Payload of the request to assign a conversation
         */
        attach_contact_to_conversation_request: {
            /**
             * @description The `id` of the admin who is adding the new participant.
             * @example 12345
             */
            admin_id?: string;
            customer?: {
                /**
                 * @description The identifier for the contact as given by Intercom.
                 * @example 6329bd9ffe4e2e91dac76188
                 */
                intercom_user_id: string;
                customer?: components["schemas"]["customer_request"];
            } | {
                /**
                 * @description The external_id you have defined for the contact who is being added as a participant.
                 * @example 6329bd9ffe4e2e91dac76188
                 */
                user_id: string;
                customer?: components["schemas"]["customer_request"];
            } | {
                /**
                 * @description The email you have defined for the contact who is being added as a participant.
                 * @example winstonsmith@truth.org
                 */
                email: string;
                customer?: components["schemas"]["customer_request"];
            };
        };
        /**
         * Close Conversation Request
         * @description Payload of the request to close a conversation
         */
        close_conversation_request: {
            /**
             * @example close
             * @enum {string}
             */
            message_type: "close";
            /**
             * @example admin
             * @enum {string}
             */
            type: "admin";
            /**
             * @description The id of the admin who is performing the action.
             * @example 12345
             */
            admin_id: string;
            /**
             * @description Optionally you can leave a message in the conversation to provide additional context to the user and other teammates.
             * @example  This conversation is now closed!
             */
            body?: string;
        };
        /**
         * Collection
         * @description Collections are top level containers for Articles within the Help Center.
         */
        collection: {
            /**
             * @description The unique identifier for the collection which is given by Intercom.
             * @example 6871119
             */
            id?: string;
            /**
             * @description The id of the workspace which the collection belongs to.
             * @example hfi1bx4l
             */
            workspace_id?: string;
            /**
             * @description The name of the collection. For multilingual collections, this will be the name of the default language's content.
             * @example Default language name
             */
            name?: string;
            /**
             * @description The description of the collection. For multilingual help centers, this will be the description of the collection for the default language.
             * @example Default language description
             */
            description?: string | null;
            /**
             * Format: date-time
             * @description The time when the article was created. For multilingual articles, this will be the timestamp of creation of the default language's content.
             * @example 1672928359
             */
            created_at?: number;
            /**
             * Format: date-time
             * @description The time when the article was last updated. For multilingual articles, this will be the timestamp of last update of the default language's content.
             * @example 1672928610
             */
            updated_at?: number;
            /**
             * @description The URL of the collection. For multilingual help centers, this will be the URL of the collection for the default language.
             * @example http://intercom.test/help/collection/name
             */
            url?: string | null;
            /**
             * @description The icon of the collection.
             * @example book-bookmark
             */
            icon?: string | null;
            /**
             * @description The order of the section in relation to others sections within a collection. Values go from `0`` upwards. `0`` is the default if there's no order.
             * @example 1
             */
            order?: number;
            /**
             * @description The default locale of the help center. This field is only returned for multilingual help centers.
             * @example en
             */
            default_locale?: string;
            translated_content?: components["schemas"]["group_translated_content"];
            /**
             * @description The id of the parent collection. If `null` then it is the first level collection.
             * @example 6871118
             */
            parent_id?: string | null;
            /**
             * @description The id of the help center the collection is in.
             * @example 123
             */
            help_center_id?: number | null;
        };
        /**
         * Collections
         * @description This will return a list of Collections for the App.
         */
        collection_list: {
            /**
             * @description The type of the object - `list`.
             * @example list
             * @enum {string}
             */
            type?: "list";
            pages?: components["schemas"]["cursor_pages"];
            /**
             * @description A count of the total number of collections.
             * @example 1
             */
            total_count?: number;
            /** @description An array of collection objects */
            data?: components["schemas"]["collection"][];
        };
        /**
         * Company
         * @description Companies allow you to represent organizations using your product. Each company will have its own description and be associated with contacts. You can fetch, create, update and list companies.
         */
        company: {
            /**
             * @description Value is `company`
             * @example company
             * @enum {string}
             */
            type?: "company";
            /**
             * @description The Intercom defined id representing the company.
             * @example 531ee472cce572a6ec000006
             */
            id?: string;
            /**
             * @description The name of the company.
             * @example Blue Sun
             */
            name?: string;
            /**
             * @description The Intercom defined code of the workspace the company is associated to.
             * @example ecahpwf5
             */
            app_id?: string;
            plan?: {
                /**
                 * @description Value is always "plan"
                 * @example plan
                 */
                type?: string;
                /**
                 * @description The id of the plan
                 * @example 269315
                 */
                id?: string;
                /**
                 * @description The name of the plan
                 * @example Pro
                 */
                name?: string;
            };
            /**
             * @description The company id you have defined for the company.
             * @example 6
             */
            company_id?: string;
            /**
             * @description The time the company was created by you.
             * @example 1663597223
             */
            remote_created_at?: number;
            /**
             * @description The time the company was added in Intercom.
             * @example 1663597223
             */
            created_at?: number;
            /**
             * @description The last time the company was updated.
             * @example 1663597223
             */
            updated_at?: number;
            /**
             * @description The time the company last recorded making a request.
             * @example 1663597223
             */
            last_request_at?: number;
            /**
             * @description The number of employees in the company.
             * @example 100
             */
            size?: number;
            /**
             * @description The URL for the company website.
             * @example https://www.intercom.com
             */
            website?: string;
            /**
             * @description The industry that the company operates in.
             * @example Software
             */
            industry?: string;
            /**
             * @description How much revenue the company generates for your business.
             * @example 100
             */
            monthly_spend?: number;
            /**
             * @description How many sessions the company has recorded.
             * @example 100
             */
            session_count?: number;
            /**
             * @description The number of users in the company.
             * @example 100
             */
            user_count?: number;
            /**
             * @description The custom attributes you have set on the company.
             * @example {
             *       "paid_subscriber": true,
             *       "monthly_spend": 155.5,
             *       "team_mates": 9
             *     }
             */
            custom_attributes?: {
                [key: string]: string | undefined;
            };
            /** @description The list of tags associated with the company */
            tags?: {
                /**
                 * @description The type of the object
                 * @enum {string}
                 */
                type?: "tag.list";
                tags?: unknown[];
            };
            /** @description The list of segments associated with the company */
            segments?: {
                /**
                 * @description The type of the object
                 * @enum {string}
                 */
                type?: "segment.list";
                segments?: components["schemas"]["segment"][];
            };
        };
        /**
         * Company Attached Contacts
         * @description A list of Contact Objects
         */
        company_attached_contacts: {
            /**
             * @description The type of object - `list`
             * @example list
             * @enum {string}
             */
            type?: "list";
            /** @description An array containing Contact Objects */
            data?: components["schemas"]["contact"][];
            /**
             * @description The total number of contacts
             * @example 100
             */
            total_count?: number;
            pages?: components["schemas"]["cursor_pages"];
        };
        /**
         * Company Attached Segments
         * @description A list of Segment Objects
         */
        company_attached_segments: {
            /**
             * @description The type of object - `list`
             * @example list
             * @enum {string}
             */
            type?: "list";
            /** @description An array containing Segment Objects */
            data?: components["schemas"]["segment"][];
        };
        /**
         * Companys
         * @description This will return a list of company for the App.
         */
        company_list: {
            /**
             * @description The type of object - `list`.
             * @example list
             * @enum {string}
             */
            type?: "list";
            pages?: components["schemas"]["cursor_pages"];
            /**
             * @description The total number of companies.
             * @example 100
             */
            total_count?: number;
            /** @description An array containing Company Objects. */
            data?: components["schemas"]["company"][];
        };
        /**
         * Company Scroll
         * @description Companies allow you to represent organizations using your product. Each company will have its own description and be associated with contacts. You can fetch, create, update and list companies.
         */
        company_scroll: {
            /**
             * @description The type of object - `list`
             * @example list
             * @enum {string}
             */
            type?: "list";
            data?: components["schemas"]["company"][];
            pages?: components["schemas"]["cursor_pages"];
            /**
             * @description The total number of companies
             * @example 100
             */
            total_count?: number | null;
            /**
             * @description The scroll parameter to use in the next request to fetch the next page of results.
             * @example 25b649f7-4d33-4ef6-88f5-60e5b8244309
             */
            scroll_param?: string;
        } | null;
        /**
         * Contact
         * @description Contact are the objects that represent your leads and users in Intercom.
         */
        contact: {
            /**
             * @description The type of object.
             * @example contact
             */
            type?: string;
            /**
             * @description The unique identifier for the contact which is given by Intercom.
             * @example 5ba682d23d7cf92bef87bfd4
             */
            id?: string;
            /**
             * @description The unique identifier for the contact which is provided by the Client.
             * @example f3b87a2e09d514c6c2e79b9a
             */
            external_id?: string | null;
            /**
             * @description The id of the workspace which the contact belongs to.
             * @example ecahpwf5
             */
            workspace_id?: string;
            /**
             * @description The role of the contact.
             * @example user
             */
            role?: string;
            /**
             * @description The contacts email.
             * @example joe@example.com
             */
            email?: string;
            /**
             * @description The contacts phone.
             * @example +1123456789
             */
            phone?: string | null;
            /**
             * @description The contacts phone number normalized to the E164 format
             * @example +1123456789
             */
            formatted_phone?: string | null;
            /**
             * @description The contacts name.
             * @example John Doe
             */
            name?: string | null;
            /**
             * @description The id of an admin that has been assigned account ownership of the contact.
             * @example 123
             */
            owner_id?: number | null;
            /**
             * @description Whether the contact has had an email sent to them hard bounce.
             * @example true
             */
            has_hard_bounced?: boolean;
            /**
             * @description Whether the contact has marked an email sent to them as spam.
             * @example true
             */
            marked_email_as_spam?: boolean;
            /**
             * @description Whether the contact is unsubscribed from emails.
             * @example true
             */
            unsubscribed_from_emails?: boolean;
            /**
             * Format: date-time
             * @description (UNIX timestamp) The time when the contact was created.
             * @example 1571672154
             */
            created_at?: number;
            /**
             * Format: date-time
             * @description (UNIX timestamp) The time when the contact was last updated.
             * @example 1571672154
             */
            updated_at?: number;
            /**
             * Format: date-time
             * @description (UNIX timestamp) The time specified for when a contact signed up.
             * @example 1571672154
             */
            signed_up_at?: number | null;
            /**
             * Format: date-time
             * @description (UNIX timestamp) The time when the contact was last seen (either where the Intercom Messenger was installed or when specified manually).
             * @example 1571672154
             */
            last_seen_at?: number | null;
            /**
             * Format: date-time
             * @description (UNIX timestamp) The time when the contact last messaged in.
             * @example 1571672154
             */
            last_replied_at?: number | null;
            /**
             * Format: date-time
             * @description (UNIX timestamp) The time when the contact was last messaged.
             * @example 1571672154
             */
            last_contacted_at?: number | null;
            /**
             * Format: date-time
             * @description (UNIX timestamp) The time when the contact last opened an email.
             * @example 1571672154
             */
            last_email_opened_at?: number | null;
            /**
             * Format: date-time
             * @description (UNIX timestamp) The time when the contact last clicked a link in an email.
             * @example 1571672154
             */
            last_email_clicked_at?: number | null;
            /**
             * @description A preferred language setting for the contact, used by the Intercom Messenger even if their browser settings change.
             * @example en
             */
            language_override?: string | null;
            /**
             * @description The name of the browser which the contact is using.
             * @example Chrome
             */
            browser?: string | null;
            /**
             * @description The version of the browser which the contact is using.
             * @example 80.0.3987.132
             */
            browser_version?: string | null;
            /**
             * @description The language set by the browser which the contact is using.
             * @example en-US
             */
            browser_language?: string | null;
            /**
             * @description The operating system which the contact is using.
             * @example Mac OS X
             */
            os?: string | null;
            /**
             * @description The name of the Android app which the contact is using.
             * @example Intercom
             */
            android_app_name?: string | null;
            /**
             * @description The version of the Android app which the contact is using.
             * @example 5.0.0
             */
            android_app_version?: string | null;
            /**
             * @description The Android device which the contact is using.
             * @example Pixel 3
             */
            android_device?: string | null;
            /**
             * @description The version of the Android OS which the contact is using.
             * @example 10
             */
            android_os_version?: string | null;
            /**
             * @description The version of the Android SDK which the contact is using.
             * @example 28
             */
            android_sdk_version?: string | null;
            /**
             * Format: date-time
             * @description (UNIX timestamp) The time when the contact was last seen on an Android device.
             * @example 1571672154
             */
            android_last_seen_at?: number | null;
            /**
             * @description The name of the iOS app which the contact is using.
             * @example Intercom
             */
            ios_app_name?: string | null;
            /**
             * @description The version of the iOS app which the contact is using.
             * @example 5.0.0
             */
            ios_app_version?: string | null;
            /**
             * @description The iOS device which the contact is using.
             * @example iPhone 11
             */
            ios_device?: string | null;
            /**
             * @description The version of iOS which the contact is using.
             * @example 13.3.1
             */
            ios_os_version?: string | null;
            /**
             * @description The version of the iOS SDK which the contact is using.
             * @example 13.3.1
             */
            ios_sdk_version?: string | null;
            /**
             * Format: date-time
             * @description (UNIX timestamp) The last time the contact used the iOS app.
             * @example 1571672154
             */
            ios_last_seen_at?: number | null;
            /** @description The custom attributes which are set for the contact. */
            custom_attributes?: Record<string, never>;
            avatar?: {
                /**
                 * @description The type of object
                 * @example avatar
                 */
                type?: string;
                /**
                 * Format: uri
                 * @description An image URL containing the avatar of a contact.
                 * @example https://example.org/128Wash.jpg
                 */
                image_url?: string | null;
            } | null;
            tags?: components["schemas"]["contact_tags"];
            notes?: components["schemas"]["contact_notes"];
            companies?: components["schemas"]["contact_companies"];
            location?: components["schemas"]["contact_location"];
            social_profiles?: components["schemas"]["contact_social_profiles"];
        };
        /**
         * Contact Archived
         * @description archived contact object
         */
        contact_archived: {
            /**
             * @description always contact
             * @example contact
             * @enum {string}
             */
            type?: "contact";
            /**
             * @description The unique identifier for the contact which is given by Intercom.
             * @example 5ba682d23d7cf92bef87bfd4
             */
            id?: string;
            /**
             * @description The unique identifier for the contact which is provided by the Client.
             * @example f3b87a2e09d514c6c2e79b9a
             */
            external_id?: string | null;
            /**
             * @description Whether the contact is archived or not.
             * @example true
             */
            archived?: boolean;
        };
        /**
         * Contact Attached Companies
         * @description A list of Company Objects
         */
        contact_attached_companies: {
            /**
             * @description The type of object
             * @example list
             * @enum {string}
             */
            type?: "list";
            /** @description An array containing Company Objects */
            companies?: components["schemas"]["company"][];
            /**
             * @description The total number of companies associated to this contact
             * @example 100
             */
            total_count?: number;
            pages?: components["schemas"]["pages_link"];
        };
        /**
         * Contact companies
         * @description An object containing companies meta data about the companies that a contact has.
         */
        contact_companies: {
            /**
             * Format: uri
             * @description Url to get more company resources for this contact
             * @example /contacts/5ba682d23d7cf92bef87bfd4/companies
             */
            url?: string;
            /**
             * @description Int representing the total number of companyies attached to this contact
             * @example 100
             */
            total_count?: number;
            /**
             * @description Whether there's more Addressable Objects to be viewed. If true, use the url to view all
             * @example true
             */
            has_more?: boolean;
        };
        /**
         * Contact Deleted
         * @description deleted contact object
         */
        contact_deleted: {
            /**
             * @description always contact
             * @example contact
             * @enum {string}
             */
            type?: "contact";
            /**
             * @description The unique identifier for the contact which is given by Intercom.
             * @example 5ba682d23d7cf92bef87bfd4
             */
            id?: string;
            /**
             * @description The unique identifier for the contact which is provided by the Client.
             * @example f3b87a2e09d514c6c2e79b9a
             */
            external_id?: string | null;
            /**
             * @description Whether the contact is deleted or not.
             * @example true
             */
            deleted?: boolean;
        };
        /**
         * Contact List
         * @description Contacts are your users in Intercom.
         */
        contact_list: {
            /**
             * @description Always list
             * @example list
             * @enum {string}
             */
            type?: "list";
            /** @description The list of contact objects */
            data?: components["schemas"]["contact"][];
            /**
             * @description A count of the total number of objects.
             * @example 100
             */
            total_count?: number;
            pages?: components["schemas"]["cursor_pages"];
        };
        /**
         * Contact Location
         * @description An object containing location meta data about a Intercom contact.
         */
        contact_location: {
            /**
             * @description Always location
             * @example location
             */
            type?: string | null;
            /**
             * @description The country that the contact is located in
             * @example Ireland
             */
            country?: string | null;
            /**
             * @description The overal region that the contact is located in
             * @example Dublin
             */
            region?: string | null;
            /**
             * @description The city that the contact is located in
             * @example Dublin
             */
            city?: string | null;
        };
        /**
         * Contact notes
         * @description An object containing notes meta data about the notes that a contact has.
         */
        contact_notes: {
            /** @description This object represents the notes attached to a contact. */
            data?: components["schemas"]["addressable_list"][];
            /**
             * Format: uri
             * @description Url to get more company resources for this contact
             * @example /contacts/5ba682d23d7cf92bef87bfd4/notes
             */
            url?: string;
            /**
             * @description Int representing the total number of companyies attached to this contact
             * @example 100
             */
            total_count?: number;
            /**
             * @description Whether there's more Addressable Objects to be viewed. If true, use the url to view all
             * @example true
             */
            has_more?: boolean;
        };
        /**
         * Contact Reference
         * @description reference to contact object
         */
        contact_reference: {
            /**
             * @description always contact
             * @example contact
             * @enum {string}
             */
            type?: "contact";
            /**
             * @description The unique identifier for the contact which is given by Intercom.
             * @example 5ba682d23d7cf92bef87bfd4
             */
            id?: string;
            /**
             * @description The unique identifier for the contact which is provided by the Client.
             * @example f3b87a2e09d514c6c2e79b9a
             */
            external_id?: string | null;
        };
        /** Contact Reply */
        contact_reply_conversation_request: components["schemas"]["contact_reply_intercom_user_id_request"] | components["schemas"]["contact_reply_email_request"] | components["schemas"]["contact_reply_user_id_request"];
        /**
         * Email
         * @description Payload of the request to reply on behalf of a contact using their `email`
         */
        contact_reply_email_request: {
            /** @enum {string} */
            message_type: "comment";
            /** @enum {string} */
            type: "user";
            /** @description The text body of the comment. */
            body: string;
            /** @description The email you have defined for the user. */
            email: string;
            /**
             * @description The time the reply was created. If not provided, the current time will be used.
             * @example 1590000000
             */
            created_at?: number;
            /** @description A list of image URLs that will be added as attachments. You can include up to 5 URLs. */
            attachment_urls?: string[];
        };
        /**
         * Intercom User ID
         * @description Payload of the request to reply on behalf of a contact using their `intercom_user_id`
         */
        contact_reply_intercom_user_id_request: {
            /** @enum {string} */
            message_type: "comment";
            /** @enum {string} */
            type: "user";
            /** @description The text body of the comment. */
            body: string;
            /** @description The identifier for the contact as given by Intercom. */
            intercom_user_id: string;
            /**
             * @description The time the reply was created. If not provided, the current time will be used.
             * @example 1590000000
             */
            created_at?: number;
            /** @description A list of image URLs that will be added as attachments. You can include up to 5 URLs. */
            attachment_urls?: string[];
        };
        /** Contact Reply on ticket */
        contact_reply_ticket_request: components["schemas"]["contact_reply_intercom_user_id_request"] | components["schemas"]["contact_reply_user_id_request"] | components["schemas"]["contact_reply_email_request"];
        /**
         * User ID
         * @description Payload of the request to reply on behalf of a contact using their `user_id`
         */
        contact_reply_user_id_request: {
            /** @enum {string} */
            message_type: "comment";
            /** @enum {string} */
            type: "user";
            /** @description The text body of the comment. */
            body: string;
            /** @description The external_id you have defined for the contact. */
            user_id: string;
            /**
             * @description The time the reply was created. If not provided, the current time will be used.
             * @example 1590000000
             */
            created_at?: number;
            /** @description A list of image URLs that will be added as attachments. You can include up to 5 URLs. */
            attachment_urls?: string[];
        };
        /**
         * Segments
         * @description A list of segments objects attached to a specific contact.
         */
        contact_segments: {
            /**
             * @description The type of the object
             * @example list
             * @enum {string}
             */
            type?: "list";
            /** @description Segment objects associated with the contact. */
            data?: components["schemas"]["segment"][];
        };
        /**
         * Social Profile
         * @description An object containing social profiles that a contact has.
         */
        contact_social_profiles: {
            /** @description A list of social profiles objects associated with the contact. */
            data?: components["schemas"]["social_profile"][];
        };
        /**
         * Contact Subscription Types
         * @description An object containing Subscription Types meta data about the SubscriptionTypes that a contact has.
         */
        contact_subscription_types: {
            /** @description This object represents the subscriptions attached to a contact. */
            data?: components["schemas"]["addressable_list"][];
            /**
             * Format: uri
             * @description Url to get more subscription type resources for this contact
             * @example /contacts/5ba682d23d7cf92bef87bfd4/subscriptions
             */
            url?: string;
            /**
             * @description Int representing the total number of subscription types attached to this contact
             * @example 100
             */
            total_count?: number;
            /**
             * @description Whether there's more Addressable Objects to be viewed. If true, use the url to view all
             * @example true
             */
            has_more?: boolean;
        };
        /**
         * Contact Tags
         * @description An object containing tags meta data about the tags that a contact has.
         */
        contact_tags: {
            /** @description This object represents the tags attached to a contact. */
            data?: components["schemas"]["addressable_list"][];
            /**
             * Format: uri
             * @description url to get more tag resources for this contact
             * @example /contacts/5ba682d23d7cf92bef87bfd4/tags
             */
            url?: string;
            /**
             * @description Int representing the total number of tags attached to this contact
             * @example 100
             */
            total_count?: number;
            /**
             * @description Whether there's more Addressable Objects to be viewed. If true, use the url to view all
             * @example true
             */
            has_more?: boolean;
        } | null;
        /**
         * Contact Unarchived
         * @description unarchived contact object
         */
        contact_unarchived: {
            /**
             * @description always contact
             * @example contact
             * @enum {string}
             */
            type?: "contact";
            /**
             * @description The unique identifier for the contact which is given by Intercom.
             * @example 5ba682d23d7cf92bef87bfd4
             */
            id?: string;
            /**
             * @description The unique identifier for the contact which is provided by the Client.
             * @example f3b87a2e09d514c6c2e79b9a
             */
            external_id?: string | null;
            /**
             * @description Whether the contact is archived or not.
             * @example false
             */
            archived?: boolean;
        };
        /**
         * Content Import Source
         * @description An external source for External Pages that you add to your Fin Content Library.
         */
        content_import_source: {
            /**
             * @description Always external_page
             * @default content_import_source
             * @example content_import_source
             * @enum {string}
             */
            type: "content_import_source";
            /**
             * @description The unique identifier for the content import source which is given by Intercom.
             * @example 1234
             */
            id: number;
            /**
             * Format: date-time
             * @description The time when the content import source was last synced.
             * @example 1672928610
             */
            last_synced_at: number;
            /**
             * @description If you intend to create or update External Pages via the API, this should be set to `api`.
             * @example api
             * @enum {string}
             */
            sync_behavior: "api" | "automatic" | "manual";
            /**
             * @description The status of the content import source.
             * @default active
             * @example active
             * @enum {string}
             */
            status: "active" | "deactivated";
            /**
             * @description The URL of the root of the external source.
             * @example https://help.example.com/
             */
            url: string;
            /**
             * Format: date-time
             * @description The time when the content import source was created.
             * @example 1672928359
             */
            created_at: number;
            /**
             * Format: date-time
             * @description The time when the content import source was last updated.
             * @example 1672928610
             */
            updated_at: number;
        };
        /**
         * Content Import Sources
         * @description This will return a list of the content import sources for the App.
         */
        content_import_sources_list: {
            /**
             * @description The type of the object - `list`.
             * @example list
             * @enum {string}
             */
            type?: "list";
            pages?: components["schemas"]["pages_link"];
            /**
             * @description A count of the total number of content import sources.
             * @example 1
             */
            total_count?: number;
            /** @description An array of Content Import Source objects */
            data?: components["schemas"]["content_import_source"][];
        };
        /**
         * Conversation
         * @description Conversations are how you can communicate with users in Intercom. They are created when a contact replies to an outbound message, or when one admin directly sends a message to a single contact.
         */
        conversation: {
            /**
             * @description Always conversation.
             * @example conversation
             */
            type?: string;
            /**
             * @description The id representing the conversation.
             * @example 1295
             */
            id?: string;
            /**
             * @description The title given to the conversation.
             * @example Conversation Title
             */
            title?: string | null;
            /**
             * Format: date-time
             * @description The time the conversation was created.
             * @example 1663597223
             */
            created_at?: number;
            /**
             * Format: date-time
             * @description The last time the conversation was updated.
             * @example 1663597260
             */
            updated_at?: number;
            /**
             * Format: date-time
             * @description The last time a Contact responded to an Admin. In other words, the time a customer started waiting for a response. Set to null if last reply is from an Admin.
             * @example 1663597260
             */
            waiting_since?: number | null;
            /**
             * Format: date-time
             * @description If set this is the time in the future when this conversation will be marked as open. i.e. it will be in a snoozed state until this time. i.e. it will be in a snoozed state until this time.
             * @example 1663597260
             */
            snoozed_until?: number | null;
            /**
             * @description Indicates whether a conversation is open (true) or closed (false).
             * @example true
             */
            open?: boolean;
            /**
             * @description Can be set to "open", "closed" or "snoozed".
             * @example open
             * @enum {string}
             */
            state?: "open" | "closed" | "snoozed";
            /**
             * @description Indicates whether a conversation has been read.
             * @example true
             */
            read?: boolean;
            /**
             * @description If marked as priority, it will return priority or else not_priority.
             * @example priority
             * @enum {string}
             */
            priority?: "priority" | "not_priority";
            /**
             * @description The id of the admin assigned to the conversation. If it's not assigned to an admin it will return null.
             * @example 0
             */
            admin_assignee_id?: number | null;
            /**
             * @description The id of the team assigned to the conversation. If it's not assigned to a team it will return null.
             * @example 5017691
             */
            team_assignee_id?: string | null;
            tags?: components["schemas"]["tags"];
            conversation_rating?: components["schemas"]["conversation_rating"];
            source?: components["schemas"]["conversation_source"];
            contacts?: components["schemas"]["conversation_contacts"];
            teammates?: components["schemas"]["conversation_teammates"];
            custom_attributes?: components["schemas"]["custom_attributes"];
            first_contact_reply?: components["schemas"]["conversation_first_contact_reply"];
            sla_applied?: components["schemas"]["sla_applied"];
            statistics?: components["schemas"]["conversation_statistics"];
            conversation_parts?: components["schemas"]["conversation_parts"];
            linked_objects?: components["schemas"]["linked_object_list"];
        };
        /**
         * Contacts
         * @description The list of contacts (users or leads) involved in this conversation. This will only contain one customer unless more were added via the group conversation feature.
         */
        conversation_contacts: {
            /**
             * @example contact.list
             * @enum {string}
             */
            type?: "contact.list";
            /** @description The list of contacts (users or leads) involved in this conversation. This will only contain one customer unless more were added via the group conversation feature. */
            contacts?: components["schemas"]["contact_reference"][];
        };
        /**
         * Conversation Deleted
         * @description deleted conversation object
         */
        conversation_deleted: {
            /**
             * @description The unique identifier for the conversation.
             * @example 5ba682d23d7cf92bef87bfd4
             */
            id?: string;
            /**
             * @description always conversation
             * @example conversation
             * @enum {string}
             */
            object?: "conversation";
            /**
             * @description Whether the conversation is deleted or not.
             * @example true
             */
            deleted?: boolean;
        };
        /**
         * First contact reply
         * @description An object containing information on the first users message. For a contact initiated message this will represent the users original message.
         */
        conversation_first_contact_reply: {
            /**
             * Format: date-time
             * @example 1663597223
             */
            created_at?: number;
            /** @example conversation */
            type?: string;
            /** @example https://developers.intercom.com/ */
            url?: string | null;
        } | null;
        /**
         * Conversation List
         * @description Conversations are how you can communicate with users in Intercom. They are created when a contact replies to an outbound message, or when one admin directly sends a message to a single contact.
         */
        conversation_list: {
            /**
             * @description Always conversation.list
             * @example conversation.list
             * @enum {string}
             */
            type?: "conversation.list";
            /** @description The list of conversation objects */
            conversations?: components["schemas"]["conversation"][];
            /**
             * @description A count of the total number of objects.
             * @example 12345
             */
            total_count?: number;
            pages?: components["schemas"]["cursor_pages"];
        };
        /**
         * Conversation Part
         * @description A Conversation Part represents a message in the conversation.
         */
        conversation_part: {
            /**
             * @description Always conversation_part
             * @example conversation_part
             */
            type?: string;
            /**
             * @description The id representing the conversation part.
             * @example 3
             */
            id?: string;
            /**
             * @description The type of conversation part.
             * @example comment
             */
            part_type?: string;
            /**
             * @description The message body, which may contain HTML. For Twitter, this will show a generic message regarding why the body is obscured.
             * @example <p>Okay!</p>
             */
            body?: string | null;
            /**
             * Format: date-time
             * @description The time the conversation part was created.
             * @example 1663597223
             */
            created_at?: number;
            /**
             * Format: date-time
             * @description The last time the conversation part was updated.
             * @example 1663597260
             */
            updated_at?: number;
            /**
             * Format: date-time
             * @description The time the user was notified with the conversation part.
             * @example 1663597260
             */
            notified_at?: number;
            /** @description The id of the admin that was assigned the conversation by this conversation_part (null if there has been no change in assignment.) */
            assigned_to?: components["schemas"]["reference"];
            author?: components["schemas"]["conversation_part_author"];
            /**
             * Conversation part attachments
             * @description A list of attachments for the part.
             */
            attachments?: components["schemas"]["part_attachment"][];
            /**
             * @description The external id of the conversation part
             * @example abcd1234
             */
            external_id?: string | null;
            /**
             * @description Whether or not the conversation part has been redacted.
             * @example false
             */
            redacted?: boolean;
        };
        /**
         * Conversation part author
         * @description The object who initiated the conversation, which can be a Contact, Admin or Team. Bots and campaigns send messages on behalf of Admins or Teams. For Twitter, this will be blank.
         */
        conversation_part_author: {
            /**
             * @description The type of the author
             * @example admin
             */
            type?: string;
            /**
             * @description The id of the author
             * @example 274
             */
            id?: string;
            /**
             * @description The name of the author
             * @example Operator
             */
            name?: string;
            /**
             * Format: email
             * @description The email of the author
             * @example operator+abcd1234@intercom.io
             */
            email?: string;
        };
        /**
         * Conversation Parts
         * @description A list of Conversation Part objects for each part message in the conversation. This is only returned when Retrieving a Conversation, and ignored when Listing all Conversations. There is a limit of 500 parts.
         */
        conversation_parts: {
            /**
             * @example conversation_part.list
             * @enum {string}
             */
            type?: "conversation_part.list";
            /**
             * Conversation Parts
             * @description A list of Conversation Part objects for each part message in the conversation. This is only returned when Retrieving a Conversation, and ignored when Listing all Conversations. There is a limit of 500 parts.
             */
            conversation_parts?: components["schemas"]["conversation_part"][];
            /** @example 2 */
            total_count?: number;
        };
        /**
         * Conversation Rating
         * @description The Conversation Rating object which contains information on the rating and/or remark added by a Contact and the Admin assigned to the conversation.
         */
        conversation_rating: {
            /**
             * @description The rating, between 1 and 5, for the conversation.
             * @example 5
             */
            rating?: number;
            /**
             * @description An optional field to add a remark to correspond to the number rating
             * @example
             */
            remark?: string;
            /**
             * Format: date-time
             * @description The time the rating was requested in the conversation being rated.
             * @example 1671028894
             */
            created_at?: number;
            contact?: components["schemas"]["contact_reference"];
            teammate?: components["schemas"]["reference"];
        } | null;
        /**
         * Conversation source
         * @description The Conversation Part that originated this conversation, which can be Contact, Admin, Campaign, Automated or Operator initiated.
         */
        conversation_source: {
            /**
             * @description This includes conversation, push, facebook, twitter and email.
             * @example conversation
             */
            type?: string;
            /**
             * @description The id representing the message.
             * @example 3
             */
            id?: string;
            /**
             * @description The conversation's initiation type. Possible values are customer_initiated, campaigns_initiated (legacy campaigns), operator_initiated (Custom bot), automated (Series and other outbounds with dynamic audience message) and admin_initiated (fixed audience message, ticket initiated by an admin, group email).
             * @example operator_initiated
             */
            delivered_as?: string;
            /**
             * @description Optional. The message subject. For Twitter, this will show a generic message regarding why the subject is obscured.
             * @example
             */
            subject?: string;
            /**
             * @description The message body, which may contain HTML. For Twitter, this will show a generic message regarding why the body is obscured.
             * @example <p>Hey there!</p>
             */
            body?: string;
            author?: components["schemas"]["conversation_part_author"];
            /** @description A list of attachments for the part. */
            attachments?: components["schemas"]["part_attachment"][];
            /**
             * @description The URL where the conversation was started. For Twitter, Email, and Bots, this will be blank.
             * @example null
             */
            url?: string | null;
            /**
             * @description Whether or not the source message has been redacted. Only applicable for contact initiated messages.
             * @example false
             */
            redacted?: boolean;
        };
        /**
         * Conversation statistics
         * @description A Statistics object containing all information required for reporting, with timestamps and calculated metrics.
         */
        conversation_statistics: {
            /** @example conversation_statistics */
            type?: string;
            /**
             * @description Duration until last assignment before first admin reply. In seconds.
             * @example 2310
             */
            time_to_assignment?: number;
            /**
             * @description Duration until first admin reply. Subtracts out of business hours. In seconds.
             * @example 2310
             */
            time_to_admin_reply?: number;
            /**
             * @description Duration until conversation was closed first time. Subtracts out of business hours. In seconds.
             * @example 2310
             */
            time_to_first_close?: number;
            /**
             * @description Duration until conversation was closed last time. Subtracts out of business hours. In seconds.
             * @example 2310
             */
            time_to_last_close?: number;
            /**
             * @description Median based on all admin replies after a contact reply. Subtracts out of business hours. In seconds.
             * @example 2310
             */
            median_time_to_reply?: number;
            /**
             * Format: date-time
             * @description Time of first text conversation part from a contact.
             * @example 1663597233
             */
            first_contact_reply_at?: number;
            /**
             * Format: date-time
             * @description Time of first assignment after first_contact_reply_at.
             * @example 1663597233
             */
            first_assignment_at?: number;
            /**
             * Format: date-time
             * @description Time of first admin reply after first_contact_reply_at.
             * @example 1663597233
             */
            first_admin_reply_at?: number;
            /**
             * Format: date-time
             * @description Time of first close after first_contact_reply_at.
             * @example 1663597233
             */
            first_close_at?: number;
            /**
             * Format: date-time
             * @description Time of last assignment after first_contact_reply_at.
             * @example 1663597233
             */
            last_assignment_at?: number;
            /**
             * Format: date-time
             * @description Time of first admin reply since most recent assignment.
             * @example 1663597233
             */
            last_assignment_admin_reply_at?: number;
            /**
             * Format: date-time
             * @description Time of the last conversation part from a contact.
             * @example 1663597233
             */
            last_contact_reply_at?: number;
            /**
             * Format: date-time
             * @description Time of the last conversation part from an admin.
             * @example 1663597233
             */
            last_admin_reply_at?: number;
            /**
             * Format: date-time
             * @description Time of the last conversation close.
             * @example 1663597233
             */
            last_close_at?: number;
            /**
             * @description The last admin who closed the conversation. Returns a reference to an Admin object.
             * @example c3po
             */
            last_closed_by_id?: string;
            /**
             * @description Number of reopens after first_contact_reply_at.
             * @example 1
             */
            count_reopens?: number;
            /**
             * @description Number of assignments after first_contact_reply_at.
             * @example 1
             */
            count_assignments?: number;
            /**
             * @description Total number of conversation parts.
             * @example 1
             */
            count_conversation_parts?: number;
        } | null;
        /**
         * Conversation teammates
         * @description The list of teammates who participated in the conversation (wrote at least one conversation part).
         */
        conversation_teammates: {
            /**
             * @description The type of the object - `admin.list`.
             * @example admin.list
             */
            type?: string;
            /** @description The list of teammates who participated in the conversation (wrote at least one conversation part). */
            teammates?: components["schemas"]["reference"][];
        } | null;
        /**
         * Convert Ticket Request Payload
         * @description You can convert a Conversation to a Ticket
         */
        convert_conversation_to_ticket_request: {
            /**
             * @description The ID of the type of ticket you want to convert the conversation to
             * @example 1234
             */
            ticket_type_id: string;
            attributes?: components["schemas"]["ticket_request_custom_attributes"];
        };
        /**
         * Convert Visitor Request Payload
         * @description You can merge a Visitor to a Contact of role type lead or user.
         */
        convert_visitor_request: {
            /**
             * @description Represents the role of the Contact model. Accepts `lead` or `user`.
             * @example user
             */
            type: string;
            /** @description The unique identifiers retained after converting or merging. */
            user: {
                /**
                 * @description The unique identifier for the contact which is given by Intercom.
                 * @example 8a88a590-e1c3-41e2-a502-e0649dbf721c
                 */
                id?: string;
                /**
                 * @description A unique identifier for the contact which is given to Intercom, which will be represented as external_id.
                 * @example 8a88a590-e1c3-41e2-a502-e0649dbf721c
                 */
                user_id?: string;
                /**
                 * @description The contact's email, retained by default if one is present.
                 * @example winstonsmith@truth.org
                 */
                email?: string;
            } | unknown | unknown;
            /** @description The unique identifiers to convert a single Visitor. */
            visitor: {
                /**
                 * @description The unique identifier for the contact which is given by Intercom.
                 * @example 8a88a590-e1c3-41e2-a502-e0649dbf721c
                 */
                id?: string;
                /**
                 * @description A unique identifier for the contact which is given to Intercom.
                 * @example 8a88a590-e1c3-41e2-a502-e0649dbf721c
                 */
                user_id?: string;
                /**
                 * @description The visitor's email.
                 * @example winstonsmith@truth.org
                 */
                email?: string;
            } | unknown | unknown | unknown;
        };
        /**
         * Create Article Request Payload
         * @description You can create an Article
         */
        create_article_request: {
            /**
             * @description The title of the article.For multilingual articles, this will be the title of the default language's content.
             * @example Thanks for everything
             */
            title: string;
            /**
             * @description The description of the article. For multilingual articles, this will be the description of the default language's content.
             * @example Description of the Article
             */
            description?: string;
            /**
             * @description The content of the article. For multilingual articles, this will be the body of the default language's content.
             * @example <p>This is the body in html</p>
             */
            body?: string;
            /**
             * @description The id of the author of the article. For multilingual articles, this will be the id of the author of the default language's content. Must be a teammate on the help center's workspace.
             * @example 1295
             */
            author_id: number;
            /**
             * @description Whether the article will be `published` or will be a `draft`. Defaults to draft. For multilingual articles, this will be the state of the default language's content.
             * @example draft
             * @enum {string}
             */
            state?: "published" | "draft";
            /**
             * @description The id of the article's parent collection or section. An article without this field stands alone.
             * @example 18
             */
            parent_id?: number;
            /**
             * @description The type of parent, which can either be a `collection` or `section`.
             * @example collection
             */
            parent_type?: string;
            translated_content?: components["schemas"]["article_translated_content"];
        } | null;
        /**
         * Create Collection Request Payload
         * @description You can create a collection
         */
        create_collection_request: {
            /**
             * @description The name of the collection. For multilingual collections, this will be the name of the default language's content.
             * @example collection 51
             */
            name: string;
            /**
             * @description The description of the collection. For multilingual collections, this will be the description of the default language's content.
             * @example English description
             */
            description?: string;
            translated_content?: components["schemas"]["group_translated_content"];
            /**
             * @description The id of the parent collection. If `null` then it will be created as the first level collection.
             * @example 6871118
             */
            parent_id?: string | null;
            /**
             * @description The id of the help center where the collection will be created. If `null` then it will be created in the default help center.
             * @example 123
             */
            help_center_id?: number | null;
        };
        /**
         * Create Contact Request Payload
         * @description Payload to create a contact
         */
        create_contact_request: {
            /** @description The role of the contact. */
            role?: string;
            /** @description A unique identifier for the contact which is given to Intercom */
            external_id?: string;
            /**
             * @description The contacts email
             * @example jdoe@example.com
             */
            email?: string;
            /**
             * @description The contacts phone
             * @example +353871234567
             */
            phone?: string | null;
            /**
             * @description The contacts name
             * @example John Doe
             */
            name?: string | null;
            /**
             * @description An image URL containing the avatar of a contact
             * @example https://www.example.com/avatar_image.jpg
             */
            avatar?: string | null;
            /**
             * Format: date-time
             * @description The time specified for when a contact signed up
             * @example 1571672154
             */
            signed_up_at?: number | null;
            /**
             * Format: date-time
             * @description The time when the contact was last seen (either where the Intercom Messenger was installed or when specified manually)
             * @example 1571672154
             */
            last_seen_at?: number | null;
            /**
             * @description The id of an admin that has been assigned account ownership of the contact
             * @example 123
             */
            owner_id?: number | null;
            /**
             * @description Whether the contact is unsubscribed from emails
             * @example true
             */
            unsubscribed_from_emails?: boolean | null;
            /** @description The custom attributes which are set for the contact */
            custom_attributes?: Record<string, never>;
        } | unknown | unknown | unknown;
        /**
         * Create Content Import Source Payload
         * @description You can add an Content Import Source to your Fin Content Library.
         */
        create_content_import_source_request: {
            /**
             * @description If you intend to create or update External Pages via the API, this should be set to `api`.
             * @example api
             * @enum {string}
             */
            sync_behavior: "api";
            /**
             * @description The status of the content import source.
             * @default active
             * @example active
             * @enum {string}
             */
            status: "active" | "deactivated";
            /**
             * @description The URL of the content import source.
             * @example https://help.example.com
             */
            url: string;
        };
        /**
         * Create Conversation Request Payload
         * @description Conversations are how you can communicate with users in Intercom. They are created when a contact replies to an outbound message, or when one admin directly sends a message to a single contact.
         */
        create_conversation_request: {
            from: {
                /**
                 * @description The role associated to the contact - user or lead.
                 * @example user
                 * @enum {string}
                 */
                type: "lead" | "user" | "contact";
                /**
                 * Format: uuid
                 * @description The identifier for the contact which is given by Intercom.
                 * @example 536e564f316c83104c000020
                 */
                id: string;
            };
            /**
             * @description The content of the message. HTML is not supported.
             * @example Hello
             */
            body: string;
        };
        /** Create Data Attribute Request */
        create_data_attribute_request: {
            /**
             * @description The name of the data attribute.
             * @example My Data Attribute
             */
            name: string;
            /**
             * @description The model that the data attribute belongs to.
             * @example contact
             * @enum {string}
             */
            model: "contact" | "company" | "conversation";
            /**
             * @description The type of data stored for this attribute.
             * @example string
             * @enum {string}
             */
            data_type: "string" | "integer" | "float" | "boolean" | "datetime" | "date";
            /**
             * @description The readable description you see in the UI for the attribute.
             * @example My Data Attribute Description
             */
            description?: string;
            /**
             * @description To create list attributes. Provide a set of hashes with `value` as the key of the options you want to make. `data_type` must be `string`.
             * @example [
             *       "option1",
             *       "option2"
             *     ]
             */
            options?: string[];
        };
        /** Create Data Event Request */
        create_data_event_request: {
            /**
             * @description The name of the event that occurred. This is presented to your App's admins when filtering and creating segments - a good event name is typically a past tense 'verb-noun' combination, to improve readability, for example `updated-plan`.
             * @example invited-friend
             */
            event_name?: string;
            /**
             * Format: date-time
             * @description The time the event occurred as a UTC Unix timestamp
             * @example 1671028894
             */
            created_at?: number;
            /**
             * @description Your identifier for the user.
             * @example 314159
             */
            user_id?: string;
            /**
             * @description Your identifier for a lead or a user.
             * @example 8a88a590-e1c3-41e2-a502-e0649dbf721c
             */
            id?: string;
            /**
             * @description An email address for your user. An email should only be used where your application uses email to uniquely identify users.
             * @example frodo.baggins@example.com
             */
            email?: string;
            /**
             * @description Optional metadata about the event.
             * @example {
             *       "invite_code": "ADDAFRIEND"
             *     }
             */
            metadata?: {
                [key: string]: string | undefined;
            };
        } | unknown | unknown | unknown;
        /**
         * Create Data Event Summaries Request
         * @description You can send a list of event summaries for a user. Each event summary should contain the event name, the time the event occurred, and the number of times the event occurred. The event name should be a past tense "verb-noun" combination, to improve readability, for example `updated-plan`.
         */
        create_data_event_summaries_request: {
            /**
             * @description Your identifier for the user.
             * @example 314159
             */
            user_id?: string;
            /** @description A list of event summaries for the user. Each event summary should contain the event name, the time the event occurred, and the number of times the event occurred. The event name should be a past tense 'verb-noun' combination, to improve readability, for example `updated-plan`. */
            event_summaries?: {
                /**
                 * @description The name of the event that occurred. A good event name is typically a past tense 'verb-noun' combination, to improve readability, for example `updated-plan`.
                 * @example invited-friend
                 */
                event_name?: string;
                /**
                 * @description The number of times the event occurred.
                 * @example 1
                 */
                count?: number;
                /**
                 * Format: date-time
                 * @description The first time the event was sent
                 * @example 1671028894
                 */
                first?: number;
                /**
                 * Format: date-time
                 * @description The last time the event was sent
                 * @example 1671028894
                 */
                last?: number;
            };
        };
        /**
         * Create Data Export Request
         * @description Request for creating a data export
         */
        create_data_exports_request: {
            /**
             * @description The start date that you request data for. It must be formatted as a unix timestamp.
             * @example 1527811200
             */
            created_at_after: number;
            /**
             * @description The end date that you request data for. It must be formatted as a unix timestamp.
             * @example 1527811200
             */
            created_at_before: number;
        };
        /**
         * Create External Page Payload
         * @description You can add an External Page to your Fin Content Library.
         */
        create_external_page_request: {
            /**
             * @description The title of the external page.
             * @example Getting started with...
             */
            title: string;
            /**
             * @description The body of the external page in HTML.
             * @example <p>Hello world!</p>
             */
            html: string;
            /**
             * @description The URL of the external page. This will be used by Fin to link end users to the page it based its answer on.
             * @example https://help.example.com/en/articles/1234-getting-started
             */
            url: string;
            /**
             * @description Whether the external page should be used to answer questions by Fin.
             * @default true
             * @example true
             */
            fin_availability: boolean;
            /**
             * @description Always en
             * @default en
             * @example en
             * @enum {string}
             */
            locale: "en";
            /**
             * @description The unique identifier for the source of the external page which was given by Intercom. Every external page must be associated with a Content Import Source which represents the place it comes from and from which it inherits a default audience (configured in the UI). For a new source, make a POST request to the Content Import Source endpoint and an ID for the source will be returned in the response.
             * @example 1234
             */
            source_id: number;
            /**
             * @description The identifier for the external page which was given by the source. Must be unique for the source.
             * @example 5678
             */
            external_id?: string;
        };
        /**
         * Create Message Request Payload
         * @description You can create a message
         */
        create_message_request: ({
            /**
             * @description The kind of message being created. Values: `in_app` or `email`.
             * @example in_app
             * @enum {string}
             */
            message_type?: "in_app" | "email";
            /**
             * @description The title of the email.
             * @example Thanks for everything
             */
            subject?: string;
            /**
             * @description The content of the message. HTML and plaintext are supported.
             * @example Hello there
             */
            body?: string;
            /**
             * @description The style of the outgoing message. Possible values `plain` or `personal`.
             * @example plain
             */
            template?: string;
            /** @description The sender of the message. If not provided, the default sender will be used. */
            from?: {
                /**
                 * @description Always `admin`.
                 * @example admin
                 * @enum {string}
                 */
                type: "admin";
                /**
                 * @description The identifier for the admin which is given by Intercom.
                 * @example 394051
                 */
                id: number;
            };
            /** @description The sender of the message. If not provided, the default sender will be used. */
            to?: {
                /**
                 * @description The role associated to the contact - `user` or `lead`.
                 * @example user
                 * @enum {string}
                 */
                type: "user" | "lead";
                /**
                 * @description The identifier for the contact which is given by Intercom.
                 * @example 536e564f316c83104c000020
                 */
                id: string;
            };
            /**
             * @description The time the message was created. If not provided, the current time will be used.
             * @example 1590000000
             */
            created_at?: number;
            /**
             * @description Whether a conversation should be opened in the inbox for the message without the contact replying. Defaults to false if not provided.
             * @default false
             * @example true
             */
            create_conversation_without_contact_reply: boolean;
        } | unknown | unknown) | null;
        /**
         * Create Or Update Company Request Payload
         * @description You can create or update a Company
         */
        create_or_update_company_request: {
            /**
             * @description The name of the Company
             * @example Intercom
             */
            name?: string;
            /**
             * @description The company id you have defined for the company. Can't be updated
             * @example 625e90fc55ab113b6d92175f
             */
            company_id?: string;
            /**
             * @description The name of the plan you have associated with the company.
             * @example Enterprise
             */
            plan?: string;
            /**
             * @description The number of employees in this company.
             * @example 100
             */
            size?: number;
            /**
             * @description The URL for this company's website. Please note that the value specified here is not validated. Accepts any string.
             * @example https://www.example.com
             */
            website?: string;
            /**
             * @description The industry that this company operates in.
             * @example Manufacturing
             */
            industry?: string;
            /**
             * @description A hash of key/value pairs containing any other data about the company you want Intercom to store.
             * @example {
             *       "paid_subscriber": true,
             *       "monthly_spend": 155.5,
             *       "team_mates": 9
             *     }
             */
            custom_attributes?: {
                [key: string]: string | undefined;
            };
            /**
             * @description The time the company was created by you.
             * @example 1394531169
             */
            remote_created_at?: number;
            /**
             * @description How much revenue the company generates for your business. Note that this will truncate floats. i.e. it only allow for whole integers, 155.98 will be truncated to 155. Note that this has an upper limit of 2**31-1 or 2147483647..
             * @example 1000
             */
            monthly_spend?: number;
        } | null;
        /**
         * Create or Update Tag Request Payload
         * @description You can create or update an existing tag.
         */
        create_or_update_tag_request: {
            /**
             * @description The name of the tag, which will be created if not found, or the new name for the tag if this is an update request. Names are case insensitive.
             * @example Independent
             */
            name: string;
            /**
             * @description The id of tag to updates.
             * @example 656452352
             */
            id?: string;
        };
        /**
         * Create Phone Switch Request Payload
         * @description You can create an phone switch
         */
        create_phone_switch_request: {
            /**
             * @description Phone number in E.164 format, that will receive the SMS to continue the conversation in the Messenger.
             * @example +1 1234567890
             */
            phone: string;
            custom_attributes?: components["schemas"]["custom_attributes"];
        } | null;
        /**
         * Create Ticket Reply Request Payload
         * @description You can create a reply on a ticket.
         */
        create_ticket_reply_with_comment_request: components["schemas"]["contact_reply_ticket_request"] | components["schemas"]["admin_reply_ticket_request"];
        /**
         * Create Ticket Request Payload
         * @description You can create a Ticket
         */
        create_ticket_request: {
            /**
             * @description The ID of the type of ticket you want to create
             * @example 1234
             */
            ticket_type_id: string;
            /**
             * @description The list of contacts (users or leads) affected by this ticket. Currently only one is allowed
             * @example [
             *       {
             *         "id": "1234"
             *       }
             *     ]
             */
            contacts: ({
                /** @description The identifier for the contact as given by Intercom. */
                id: string;
            } | {
                /** @description The external_id you have defined for the contact who is being added as a participant. */
                external_id: string;
            } | {
                /** @description The email you have defined for the contact who is being added as a participant. If a contact with this email does not exist, one will be created. */
                email: string;
            })[];
            /**
             * @description The time the ticket was created. If not provided, the current time will be used.
             * @example 1590000000
             */
            created_at?: number;
            ticket_attributes?: components["schemas"]["ticket_request_custom_attributes"];
        };
        /**
         * Create Ticket Type Attribute Request Payload
         * @description You can create a Ticket Type Attribute
         */
        create_ticket_type_attribute_request: {
            /**
             * @description The name of the ticket type attribute
             * @example Bug Priority
             */
            name: string;
            /**
             * @description The description of the attribute presented to the teammate or contact
             * @example Priority level of the bug
             */
            description: string;
            /**
             * @description The data type of the attribute
             * @example string
             * @enum {string}
             */
            data_type: "string" | "list" | "integer" | "decimal" | "boolean" | "datetime" | "files";
            /**
             * @description Whether the attribute is required to be filled in when teammates are creating the ticket in Inbox.
             * @default false
             * @example false
             */
            required_to_create: boolean;
            /**
             * @description Whether the attribute is required to be filled in when contacts are creating the ticket in Messenger.
             * @default false
             * @example false
             */
            required_to_create_for_contacts: boolean;
            /**
             * @description Whether the attribute is visible to teammates when creating a ticket in Inbox.
             * @default true
             * @example true
             */
            visible_on_create: boolean;
            /**
             * @description Whether the attribute is visible to contacts when creating a ticket in Messenger.
             * @default true
             * @example true
             */
            visible_to_contacts: boolean;
            /**
             * @description Whether the attribute allows multiple lines of text (only applicable to string attributes)
             * @example false
             */
            multiline?: boolean;
            /**
             * @description A comma delimited list of items for the attribute value (only applicable to list attributes)
             * @example Low Priority,Medium Priority,High Priority
             */
            list_items?: string;
            /**
             * @description Whether the attribute allows multiple files to be attached to it (only applicable to file attributes)
             * @example false
             */
            allow_multiple_values?: boolean;
        };
        /**
         * Create Ticket Type Request Payload
         * @description The request payload for creating a ticket type.
         *       You can copy the `icon` property for your ticket type from [Twemoji Cheatsheet](https://twemoji-cheatsheet.vercel.app/)
         *
         */
        create_ticket_type_request: {
            /**
             * @description The name of the ticket type.
             * @example Bug
             */
            name: string;
            /**
             * @description The description of the ticket type.
             * @example Used for tracking bugs
             */
            description?: string;
            /**
             * @description Category of the Ticket Type.
             * @example Customer
             * @enum {string}
             */
            category?: "Customer" | "Back-office" | "Tracker";
            /**
             * @description The icon of the ticket type.
             * @default 🎟️
             * @example 🐞
             */
            icon: string;
            /**
             * @description Whether the tickets associated with this ticket type are intended for internal use only or will be shared with customers. This is currently a limited attribute.
             * @default false
             * @example false
             */
            is_internal: boolean;
        } | null;
        /**
         * Cursor based pages
         * @description Cursor-based pagination is a technique used in the Intercom API to navigate through large amounts of data.
         *     A "cursor" or pointer is used to keep track of the current position in the result set, allowing the API to return the data in small chunks or "pages" as needed.
         *
         */
        cursor_pages: {
            /**
             * @description the type of object `pages`.
             * @example pages
             * @enum {string}
             */
            type?: "pages";
            /**
             * @description The current page
             * @example 1
             */
            page?: number;
            next?: components["schemas"]["starting_after_paging"];
            /**
             * @description Number of results per page
             * @example 2
             */
            per_page?: number;
            /**
             * @description Total number of pages
             * @example 13
             */
            total_pages?: number;
        } | null;
        /**
         * Custom Attributes
         * @description An object containing the different custom attributes associated to the conversation as key-value pairs. For relationship attributes the value will be a list of custom object instance models.
         */
        custom_attributes: {
            [key: string]: (string | components["schemas"]["custom_object_instance"]) | undefined;
        };
        /**
         * Custom Object Instance
         * @description An instance of a Custom Object Type.
         */
        custom_object_instance: {
            /**
             * @description The Intercom defined id representing the custom object instance.
             * @example 5a7a19e9f59ae20001d1c1e6
             */
            id?: string;
            /**
             * @description The id you have defined for the custom object instance.
             * @example 0001d1c1e65a7a19e9f59ae2
             */
            external_id?: string;
            /**
             * @description The identifier of the custom object type that defines the structure of the custom object instance.
             * @example Order
             */
            type?: string;
            /** @description The custom attributes you have set on the custom object instance. */
            custom_attributes?: {
                [key: string]: string | undefined;
            };
        } | null;
        customer_request: ({
            /**
             * @description The identifier for the contact as given by Intercom.
             * @example 6329bd9ffe4e2e91dac76188
             */
            intercom_user_id: string;
        } | {
            /**
             * @description The external_id you have defined for the contact who is being added as a participant.
             * @example 2e91dac761886329bd9ffe4e
             */
            user_id: string;
        } | {
            /**
             * @description The email you have defined for the contact who is being added as a participant.
             * @example sam.sung@example.com
             */
            email: string;
        }) | null;
        /**
         * Data Attribute
         * @description Data Attributes are metadata used to describe your contact, company and conversation models. These include standard and custom attributes. By using the data attributes endpoint, you can get the global list of attributes for your workspace, as well as create and archive custom attributes.
         */
        data_attribute: {
            /**
             * @description Value is `data_attribute`.
             * @example data_attribute
             * @enum {string}
             */
            type?: "data_attribute";
            /**
             * @description The unique identifier for the data attribute which is given by Intercom. Only available for custom attributes.
             * @example 12878
             */
            id?: number;
            /**
             * @description Value is `contact` for user/lead attributes, `company` for company attributes and `conversation` for conversation attributes..
             * @example contact
             * @enum {string}
             */
            model?: "contact" | "company" | "conversation";
            /**
             * @description Name of the attribute.
             * @example paid_subscriber
             */
            name?: string;
            /**
             * @description Full name of the attribute. Should match the name unless it's a nested attribute. We can split full_name on `.` to access nested user object values.
             * @example custom_attributes.paid_subscriber
             */
            full_name?: string;
            /**
             * @description Readable name of the attribute (i.e. name you see in the UI)
             * @example Paid Subscriber
             */
            label?: string;
            /**
             * @description Readable description of the attribute.
             * @example Whether the user is a paid subscriber.
             */
            description?: string;
            /**
             * @description The data type of the attribute.
             * @example boolean
             * @enum {string}
             */
            data_type?: "string" | "integer" | "float" | "boolean" | "date";
            /**
             * @description List of predefined options for attribute value.
             * @example [
             *       "true",
             *       "false"
             *     ]
             */
            options?: string[];
            /**
             * @description Can this attribute be updated through API
             * @example true
             */
            api_writable?: boolean;
            /**
             * @description Can this attribute be updated in the UI
             * @example true
             */
            ui_writable?: boolean;
            /**
             * @description Set to true if this is a CDA
             * @example true
             */
            custom?: boolean;
            /**
             * @description Is this attribute archived. (Only applicable to CDAs)
             * @example false
             */
            archived?: boolean;
            /**
             * Format: date-time
             * @description The time the attribute was created as a UTC Unix timestamp
             * @example 1671028894
             */
            created_at?: number;
            /**
             * Format: date-time
             * @description The time the attribute was last updated as a UTC Unix timestamp
             * @example 1671028894
             */
            updated_at?: number;
            /**
             * @description Teammate who created the attribute. Only applicable to CDAs
             * @example 5712945
             */
            admin_id?: string;
        };
        /**
         * Data Attribute List
         * @description A list of all data attributes belonging to a workspace for contacts, companies or conversations.
         */
        data_attribute_list: {
            /**
             * @description The type of the object
             * @example list
             * @enum {string}
             */
            type?: "list";
            /** @description A list of data attributes */
            data?: components["schemas"]["data_attribute"][];
        };
        /**
         * Data Event
         * @description Data events are used to notify Intercom of changes to your data.
         */
        data_event: {
            /**
             * @description The type of the object
             * @example event
             * @enum {string}
             */
            type?: "event";
            /**
             * @description The name of the event that occurred. This is presented to your App's admins when filtering and creating segments - a good event name is typically a past tense 'verb-noun' combination, to improve readability, for example `updated-plan`.
             * @example invited-friend
             */
            event_name: string;
            /**
             * Format: date-time
             * @description The time the event occurred as a UTC Unix timestamp
             * @example 1671028894
             */
            created_at: number;
            /**
             * @description Your identifier for the user.
             * @example 314159
             */
            user_id?: string;
            /**
             * @description Your identifier for a lead or a user.
             * @example 8a88a590-e1c3-41e2-a502-e0649dbf721c
             */
            id?: string;
            /**
             * @description The Intercom identifier for the user.
             * @example 63a0979a5eeebeaf28dd56ba
             */
            intercom_user_id?: string;
            /**
             * @description An email address for your user. An email should only be used where your application uses email to uniquely identify users.
             * @example frodo.baggins@example.com
             */
            email?: string;
            /**
             * @description Optional metadata about the event.
             * @example {
             *       "invite_code": "ADDAFRIEND"
             *     }
             */
            metadata?: {
                [key: string]: string | undefined;
            };
        };
        /**
         * Data Event List
         * @description This will return a list of data events for the App.
         */
        data_event_list: {
            /**
             * @description The type of the object
             * @example event.list
             * @enum {string}
             */
            type?: "event.list";
            /** @description A list of data events */
            events?: components["schemas"]["data_event"][];
            /** @description Pagination */
            pages?: {
                /** @example https://api.intercom.io/events?per_page=2&before=1389913941064&intercom_user_id=63a0979a5eeebeaf28dd56ba&type=user" */
                next?: string;
                /** @example https://api.intercom.io/events?intercom_user_id=63a0979a5eeebeaf28dd56ba&type=user&since=1389913941065 */
                since?: string;
            };
        };
        /**
         * Data Event Summary
         * @description This will return a summary of data events for the App.
         */
        data_event_summary: {
            /**
             * @description The type of the object
             * @example event.summary
             * @enum {string}
             */
            type?: "event.summary";
            /**
             * @description The email address of the user
             * @example Sam.Sung@example.com
             */
            email?: string;
            /**
             * @description The Intercom user ID of the user
             * @example 63a0979a5eeebeaf28dd56ba
             */
            intercom_user_id?: string;
            /**
             * @description The user ID of the user
             * @example 62b997f288e14803c5006932
             */
            user_id?: string;
            /** @description A summary of data events */
            events?: components["schemas"]["data_event_summary_item"][];
        };
        /**
         * Data Event Summary Item
         * @description This will return a summary of a data event for the App.
         */
        data_event_summary_item: {
            /**
             * @description The name of the event
             * @example placed-order
             */
            name?: string;
            /**
             * @description The first time the event was sent
             * @example 2014-01-16T23:12:21.000+00:00
             */
            first?: string;
            /**
             * @description The last time the event was sent
             * @example 2014-01-16T23:12:21.000+00:00
             */
            last?: string;
            /**
             * @description The number of times the event was sent
             * @example 1
             */
            count?: number;
            /**
             * @description The description of the event
             * @example A user placed an order
             */
            description?: string;
        } | null;
        /**
         * Data Export
         * @description The data export api is used to view all message sent & viewed in a given timeframe.
         */
        data_export: {
            /**
             * @description The identifier for your job.
             * @example orzzsbd7hk67xyu
             */
            job_identfier?: string;
            /**
             * @description The current state of your job.
             * @example pending
             * @enum {string}
             */
            status?: "pending" | "in_progress" | "failed" | "completed" | "no_data" | "canceled";
            /**
             * @description The time after which you will not be able to access the data.
             * @example 1674917488
             */
            download_expires_at?: string;
            /**
             * @description The location where you can download your data.
             * @example https://api.intercom.test/download/messages/data/example
             */
            download_url?: string;
        };
        /**
         * Data Export CSV
         * @description A CSV output file
         */
        data_export_csv: {
            /** @description The user_id of the user who was sent the message. */
            user_id?: string;
            /** @description The external_user_id of the user who was sent the message */
            user_external_id?: string;
            /** @description The company ID of the user in relation to the message that was sent. Will return -1 if no company is present. */
            company_id?: string;
            /** @description The users email who was sent the message. */
            email?: string;
            /** @description The full name of the user receiving the message */
            name?: string;
            /** @description The id of the message. */
            ruleset_id?: string;
            /** @description The specific content that was received. In an A/B test each version has its own Content ID. */
            content_id?: string;
            /** @description Email, Chat, Post etc. */
            content_type?: string;
            /** @description The title of the content you see in your Intercom workspace. */
            content_title?: string;
            /** @description As you edit content we record new versions. This ID can help you determine which version of a piece of content that was received. */
            ruleset_version_id?: string;
            /** @description ID for this receipt. Will be included with any related stats in other files to identify this specific delivery of a message. */
            receipt_id?: string;
            /** @description Timestamp for when the receipt was recorded. */
            received_at?: number;
            /** @description The id of the series that this content is part of. Will return -1 if not part of a series. */
            series_id?: string;
            /** @description The title of the series that this content is part of. */
            series_title?: string;
            /** @description The id of the series node that this ruleset is associated with. Each block in a series has a corresponding node_id. */
            node_id?: string;
            /** @description The first time a user replied to this message if the content was able to receive replies. */
            first_reply?: number;
            /** @description The first time a user completed this message if the content was able to be completed e.g. Tours, Surveys. */
            first_completion?: number;
            /** @description The first time the series this message was a part of was completed by the user. */
            first_series_completion?: number;
            /** @description The first time the series this message was a part of was disengaged by the user. */
            first_series_disengagement?: number;
            /** @description The first time the series this message was a part of was exited by the user. */
            first_series_exit?: number;
            /** @description The first time the user met this messages associated goal if one exists. */
            first_goal_success?: number;
            /** @description The first time the user opened this message. */
            first_open?: number;
            /** @description The first time the series the user clicked on a link within this message. */
            first_click?: number;
            /** @description The first time the series the user dismissed this message. */
            first_dismisall?: number;
            /** @description The first time the user unsubscribed from this message. */
            first_unsubscribe?: number;
            /** @description The first time this message hard bounced for this user */
            first_hard_bounce?: number;
        };
        /**
         * Deleted Article Object
         * @description Response returned when an object is deleted
         */
        deleted_article_object: {
            /**
             * @description The unique identifier for the article which you provided in the URL.
             * @example 6890762
             */
            id?: string;
            /**
             * @description The type of object which was deleted. - article
             * @example article
             * @enum {string}
             */
            object?: "article";
            /**
             * @description Whether the article was deleted successfully or not.
             * @example true
             */
            deleted?: boolean;
        };
        /**
         * Deleted Collection Object
         * @description Response returned when an object is deleted
         */
        deleted_collection_object: {
            /**
             * @description The unique identifier for the collection which you provided in the URL.
             * @example 6890762
             */
            id?: string;
            /**
             * @description The type of object which was deleted. - `collection`
             * @example collection
             * @enum {string}
             */
            object?: "collection";
            /**
             * @description Whether the collection was deleted successfully or not.
             * @example true
             */
            deleted?: boolean;
        };
        /**
         * Deleted Company Object
         * @description Response returned when an object is deleted
         */
        deleted_company_object: {
            /**
             * @description The unique identifier for the company which is given by Intercom.
             * @example 5b7e8b2f-7a1a-4e6c-8e1b-4f9d4f4c4d4f
             */
            id?: string;
            /**
             * @description The type of object which was deleted. - `company`
             * @example company
             * @enum {string}
             */
            object?: "company";
            /**
             * @description Whether the company was deleted successfully or not.
             * @example true
             */
            deleted?: boolean;
        };
        /**
         * Deleted Object
         * @description Response returned when an object is deleted
         */
        deleted_object: {
            /**
             * @description The unique identifier for the news item which you provided in the URL.
             * @example 6890762
             */
            id?: string;
            /**
             * @description The type of object which was deleted - news-item.
             * @example news-item
             * @enum {string}
             */
            object?: "news-item";
            /**
             * @description Whether the news item was deleted successfully or not.
             * @example true
             */
            deleted?: boolean;
        };
        detach_contact_from_conversation_request: {
            /**
             * @description The `id` of the admin who is performing the action.
             * @example 5017690
             */
            admin_id: string;
        };
        /**
         * Error
         * @description The API will return an Error List for a failed request, which will contain one or more Error objects.
         */
        error: {
            /**
             * @description The type is error.list
             * @example error.list
             */
            type: string;
            /**
             * Format: uuid
             * @example f93ecfa8-d08a-4325-8694-89aeb89c8f85
             */
            request_id?: string | null;
            /** @description An array of one or more error objects */
            errors: {
                /**
                 * @description A string indicating the kind of error, used to further qualify the HTTP response code
                 * @example unauthorized
                 */
                code: string;
                /**
                 * @description Optional. Human readable description of the error.
                 * @example Access Token Invalid
                 */
                message?: string | null;
                /**
                 * @description Optional. Used to identify a particular field or query parameter that was in error.
                 * @example email
                 */
                field?: string | null;
            }[];
        };
        /**
         * External Page
         * @description External pages that you have added to your Fin Content Library.
         */
        external_page: {
            /**
             * @description Always external_page
             * @default external_page
             * @example external_page
             * @enum {string}
             */
            type: "external_page";
            /**
             * @description The unique identifier for the external page which is given by Intercom.
             * @example 1234
             */
            id: string;
            /**
             * @description The title of the external page.
             * @example Getting started with...
             */
            title: string;
            /**
             * @description The body of the external page in HTML.
             * @example <p>Hello world!</p>
             */
            html: string;
            /**
             * @description The URL of the external page. This will be used by Fin to link end users to the page it based its answer on.
             * @example https://help.example.com/en/articles/1234-getting-started
             */
            url: string;
            /**
             * @description Whether the external page should be used to answer questions by Fin.
             * @example true
             */
            fin_availability: boolean;
            /**
             * @description Always en
             * @default en
             * @example en
             * @enum {string}
             */
            locale: "en";
            /**
             * @description The unique identifier for the source of the external page which was given by Intercom. Every external page must be associated with a Content Import Source which represents the place it comes from and from which it inherits a default audience (configured in the UI). For a new source, make a POST request to the Content Import Source endpoint and an ID for the source will be returned in the response.
             * @example 1234
             */
            source_id: number;
            /**
             * @description The identifier for the external page which was given by the source. Must be unique for the source.
             * @example 5678
             */
            external_id?: string;
            /**
             * Format: date-time
             * @description The time when the external page was created.
             * @example 1672928359
             */
            created_at: number;
            /**
             * Format: date-time
             * @description The time when the external page was last updated.
             * @example 1672928610
             */
            updated_at: number;
            /**
             * Format: date-time
             * @description The time when the external page was last ingested.
             * @example 1672928610
             */
            last_ingested_at: number;
        };
        /**
         * External Pages
         * @description This will return a list of external pages for the App.
         */
        external_pages_list: {
            /**
             * @description The type of the object - `list`.
             * @example list
             * @enum {string}
             */
            type?: "list";
            pages?: components["schemas"]["pages_link"];
            /**
             * @description A count of the total number of external pages.
             * @example 1
             */
            total_count?: number;
            /** @description An array of External Page objects */
            data?: components["schemas"]["external_page"][];
        };
        /**
         * File
         * @description The value describing a file upload set for a custom attribute
         */
        file_attribute: {
            /** @example upload */
            type?: string;
            /**
             * @description The name of the file
             * @example Screenshot.png
             */
            name?: string;
            /**
             * @description The url of the file. This is a temporary URL and will expire after 30 minutes.
             * @example https://intercom-attachments-1.com/.../Screenshot.png
             */
            url?: string;
            /**
             * @description The type of file
             * @example image/png
             */
            content_type?: string;
            /**
             * @description The size of the file in bytes
             * @example 11308309
             */
            filesize?: number;
            /**
             * @description The width of the file in pixels, if applicable
             * @example 3024
             */
            width?: number;
            /**
             * @description The height of the file in pixels, if applicable
             * @example 1964
             */
            height?: number;
        };
        /**
         * Group Content
         * @description The Content of a Group.
         */
        group_content: {
            /**
             * @description The type of object - `group_content` .
             * @example group_content
             * @enum {string|null}
             */
            type?: null | "group_content";
            /**
             * @description The name of the collection or section.
             * @example Collection name
             */
            name?: string;
            /**
             * @description The description of the collection. Only available for collections.
             * @example  Collection description
             */
            description?: string;
        } | null;
        /**
         * Group Translated Content
         * @description The Translated Content of an Group. The keys are the locale codes and the values are the translated content of the Group.
         */
        group_translated_content: {
            /**
             * @description The type of object - group_translated_content.
             * @example group_translated_content
             * @enum {string|null}
             */
            type?: null | "group_translated_content";
            /** @description The content of the group in Arabic */
            ar?: components["schemas"]["group_content"];
            /** @description The content of the group in Bulgarian */
            bg?: components["schemas"]["group_content"];
            /** @description The content of the group in Bosnian */
            bs?: components["schemas"]["group_content"];
            /** @description The content of the group in Catalan */
            ca?: components["schemas"]["group_content"];
            /** @description The content of the group in Czech */
            cs?: components["schemas"]["group_content"];
            /** @description The content of the group in Danish */
            da?: components["schemas"]["group_content"];
            /** @description The content of the group in German */
            de?: components["schemas"]["group_content"];
            /** @description The content of the group in Greek */
            el?: components["schemas"]["group_content"];
            /** @description The content of the group in English */
            en?: components["schemas"]["group_content"];
            /** @description The content of the group in Spanish */
            es?: components["schemas"]["group_content"];
            /** @description The content of the group in Estonian */
            et?: components["schemas"]["group_content"];
            /** @description The content of the group in Finnish */
            fi?: components["schemas"]["group_content"];
            /** @description The content of the group in French */
            fr?: components["schemas"]["group_content"];
            /** @description The content of the group in Hebrew */
            he?: components["schemas"]["group_content"];
            /** @description The content of the group in Croatian */
            hr?: components["schemas"]["group_content"];
            /** @description The content of the group in Hungarian */
            hu?: components["schemas"]["group_content"];
            /** @description The content of the group in Indonesian */
            id?: components["schemas"]["group_content"];
            /** @description The content of the group in Italian */
            it?: components["schemas"]["group_content"];
            /** @description The content of the group in Japanese */
            ja?: components["schemas"]["group_content"];
            /** @description The content of the group in Korean */
            ko?: components["schemas"]["group_content"];
            /** @description The content of the group in Lithuanian */
            lt?: components["schemas"]["group_content"];
            /** @description The content of the group in Latvian */
            lv?: components["schemas"]["group_content"];
            /** @description The content of the group in Mongolian */
            mn?: components["schemas"]["group_content"];
            /** @description The content of the group in Norwegian */
            nb?: components["schemas"]["group_content"];
            /** @description The content of the group in Dutch */
            nl?: components["schemas"]["group_content"];
            /** @description The content of the group in Polish */
            pl?: components["schemas"]["group_content"];
            /** @description The content of the group in Portuguese (Portugal) */
            pt?: components["schemas"]["group_content"];
            /** @description The content of the group in Romanian */
            ro?: components["schemas"]["group_content"];
            /** @description The content of the group in Russian */
            ru?: components["schemas"]["group_content"];
            /** @description The content of the group in Slovenian */
            sl?: components["schemas"]["group_content"];
            /** @description The content of the group in Serbian */
            sr?: components["schemas"]["group_content"];
            /** @description The content of the group in Swedish */
            sv?: components["schemas"]["group_content"];
            /** @description The content of the group in Turkish */
            tr?: components["schemas"]["group_content"];
            /** @description The content of the group in Vietnamese */
            vi?: components["schemas"]["group_content"];
            /** @description The content of the group in Portuguese (Brazil) */
            "pt-BR"?: components["schemas"]["group_content"];
            /** @description The content of the group in Chinese (China) */
            "zh-CN"?: components["schemas"]["group_content"];
            /** @description The content of the group in Chinese (Taiwan) */
            "zh-TW"?: components["schemas"]["group_content"];
        } | null;
        /**
         * Help Center
         * @description Help Centers contain collections
         */
        help_center: {
            /**
             * @description The unique identifier for the Help Center which is given by Intercom.
             * @example 123
             */
            id?: string;
            /**
             * @description The id of the workspace which the Help Center belongs to.
             * @example hfi1bx4l
             */
            workspace_id?: string;
            /**
             * Format: date-time
             * @description The time when the Help Center was created.
             * @example 1672928359
             */
            created_at?: number;
            /**
             * Format: date-time
             * @description The time when the Help Center was last updated.
             * @example 1672928610
             */
            updated_at?: number;
            /**
             * @description The identifier of the Help Center. This is used in the URL of the Help Center.
             * @example intercom
             */
            identifier?: string;
            /**
             * @description Whether the Help Center is turned on or not. This is controlled in your Help Center settings.
             * @example true
             */
            website_turned_on?: boolean;
            /**
             * @description The display name of the Help Center only seen by teammates.
             * @example Intercom Help Center
             */
            display_name?: string;
        };
        /**
         * Help Centers
         * @description A list of Help Centers belonging to the App
         */
        help_center_list: {
            /**
             * @description The type of the object - `list`.
             * @example list
             * @enum {string}
             */
            type?: "list";
            /** @description An array of Help Center objects */
            data?: components["schemas"]["help_center"][];
        };
        /**
         * @description Intercom API version.</br>By default, it's equal to the version set in the app package.
         * @default Unstable
         * @example Unstable
         * @enum {string}
         */
        intercom_version: "1.0" | "1.1" | "1.2" | "1.3" | "1.4" | "2.0" | "2.1" | "2.2" | "2.3" | "2.4" | "2.5" | "2.6" | "2.7" | "2.8" | "2.9" | "2.10" | "Unstable";
        /**
         * Linked Object
         * @description A linked conversation or ticket.
         */
        linked_object: {
            /**
             * @description ticket or conversation
             * @example ticket
             * @enum {string}
             */
            type?: "ticket" | "conversation";
            /**
             * @description The ID of the linked object
             * @example 7583
             */
            id?: string;
            /**
             * @description Category of the Linked Ticket Object.
             * @example Customer
             * @enum {string|null}
             */
            category?: "Customer" | "Back-office" | "Tracker" | null;
        };
        /**
         * Linked Objects
         * @description An object containing metadata about linked conversations and linked tickets. Up to 1000 can be returned.
         */
        linked_object_list: {
            /**
             * @description Always list.
             * @example list
             * @enum {string}
             */
            type?: "list";
            /**
             * @description The total number of linked objects.
             * @example 100
             */
            total_count?: number;
            /**
             * @description Whether or not there are more linked objects than returned.
             * @example false
             */
            has_more?: boolean;
            /** @description An array containing the linked conversations and linked tickets. */
            data?: components["schemas"]["linked_object"][];
        };
        /**
         * Merge contact data
         * @description Merge contact data.
         */
        merge_contacts_request: {
            /**
             * @description The unique identifier for the contact to merge away from. Must be a lead.
             * @example 5d70dd30de4efd54f42fd526
             */
            from?: string;
            /**
             * @description The unique identifier for the contact to merge into. Must be a user.
             * @example 5ba682d23d7cf92bef87bfd4
             */
            into?: string;
        };
        /**
         * Message
         * @description Message are how you reach out to contacts in Intercom. They are created when an admin sends an outbound message to a contact.
         */
        message: {
            /**
             * @description The type of the message
             * @example user_message
             */
            type: string;
            /**
             * @description The id representing the message.
             * @example 1488971108
             */
            id: string;
            /**
             * Format: date-time
             * @description The time the conversation was created.
             * @example 1667560812
             */
            created_at: number;
            /**
             * @description The subject of the message. Only present if message_type: email.
             * @example Greetings
             */
            subject?: string;
            /**
             * @description The message body, which may contain HTML.
             * @example Hello
             */
            body: string;
            /**
             * @description The type of message that was sent. Can be email, inapp, facebook or twitter.
             * @example inapp
             * @enum {string}
             */
            message_type: "email" | "inapp" | "facebook" | "twitter";
            /**
             * @description The associated conversation_id
             * @example 64619700005570
             */
            conversation_id?: string;
        };
        multiple_filter_search_request: {
            /**
             * @description An operator to allow boolean inspection between multiple fields.
             * @example AND
             * @enum {string}
             */
            operator?: "AND" | "OR";
            value?: components["schemas"]["multiple_filter_search_request"][] | components["schemas"]["single_filter_search_request"][];
        };
        /**
         * News Item
         * @description A News Item is a content type in Intercom enabling you to announce product updates, company news, promotions, events and more with your customers.
         */
        news_item: {
            /**
             * @description The type of object.
             * @example news-item
             * @enum {string}
             */
            type?: "news-item";
            /**
             * @description The unique identifier for the news item which is given by Intercom.
             * @example 141
             */
            id?: string;
            /**
             * @description The id of the workspace which the news item belongs to.
             * @example t74hdn32
             */
            workspace_id?: string;
            /**
             * @description The title of the news item.
             * @example New feature: News Items
             */
            title?: string;
            /**
             * @description The news item body, which may contain HTML.
             * @example We are excited to announce the launch of News Items, a new content type in Intercom enabling you to announce product updates, company news, promotions, events and more with your customers.
             */
            body?: string;
            /**
             * @description The id of the sender of the news item. Must be a teammate on the workspace.
             * @example 123
             */
            sender_id?: number;
            /**
             * @description News items will not be visible to your users in the assigned newsfeeds until they are set live.
             * @example live
             * @enum {string}
             */
            state?: "draft" | "live";
            /** @description A list of newsfeed_assignments to assign to the specified newsfeed. */
            newsfeed_assignments?: components["schemas"]["newsfeed_assignment"][];
            /** @description Label names displayed to users to categorize the news item. */
            labels?: (string | null)[];
            /**
             * Format: uri
             * @description URL of the image used as cover. Must have .jpg or .png extension.
             * @example https://example.com/cover.jpg
             */
            cover_image_url?: string | null;
            /** @description Ordered list of emoji reactions to the news item. When empty, reactions are disabled. */
            reactions?: (string | null)[];
            /**
             * @description When set to true, the news item will appear in the messenger newsfeed without showing a notification badge.
             * @example true
             */
            deliver_silently?: boolean;
            /**
             * Format: timestamp
             * @description Timestamp for when the news item was created.
             * @example 1610589632
             */
            created_at?: number;
            /**
             * Format: timestamp
             * @description Timestamp for when the news item was last updated.
             * @example 1610589632
             */
            updated_at?: number;
        };
        /**
         * Create News Item Request
         * @description A News Item is a content type in Intercom enabling you to announce product updates, company news, promotions, events and more with your customers.
         */
        news_item_request: {
            /**
             * @description The title of the news item.
             * @example Halloween is here!
             */
            title: string;
            /**
             * @description The news item body, which may contain HTML.
             * @example <p>New costumes in store for this spooky season</p>
             */
            body?: string;
            /**
             * @description The id of the sender of the news item. Must be a teammate on the workspace.
             * @example 123
             */
            sender_id: number;
            /**
             * @description News items will not be visible to your users in the assigned newsfeeds until they are set live.
             * @example live
             * @enum {string}
             */
            state?: "draft" | "live";
            /**
             * @description When set to `true`, the news item will appear in the messenger newsfeed without showing a notification badge.
             * @example true
             */
            deliver_silently?: boolean;
            /**
             * @description Label names displayed to users to categorize the news item.
             * @example [
             *       "Product",
             *       "Update",
             *       "New"
             *     ]
             */
            labels?: string[];
            /**
             * @description Ordered list of emoji reactions to the news item. When empty, reactions are disabled.
             * @example [
             *       "😆",
             *       "😅"
             *     ]
             */
            reactions?: (string | null)[];
            /** @description A list of newsfeed_assignments to assign to the specified newsfeed. */
            newsfeed_assignments?: components["schemas"]["newsfeed_assignment"][];
        };
        /**
         * Newsfeed
         * @description A newsfeed is a collection of news items, targeted to a specific audience.
         *
         *     Newsfeeds currently cannot be edited through the API, please refer to [this article](https://www.intercom.com/help/en/articles/6362267-getting-started-with-news) to set up your newsfeeds in Intercom.
         *
         */
        newsfeed: {
            /**
             * @description The unique identifier for the newsfeed which is given by Intercom.
             * @example 12312
             */
            id?: string;
            /**
             * @description The type of object.
             * @example newsfeed
             * @enum {string}
             */
            type?: "newsfeed";
            /**
             * @description The name of the newsfeed. This name will never be visible to your users.
             * @example My Newsfeed
             */
            name?: string;
            /**
             * Format: timestamp
             * @description Timestamp for when the newsfeed was created.
             * @example 1674917488
             */
            created_at?: number;
            /**
             * Format: timestamp
             * @description Timestamp for when the newsfeed was last updated.
             * @example 1674917488
             */
            updated_at?: number;
        };
        /**
         * Newsfeed Assignment
         * @description Assigns a news item to a newsfeed.
         */
        newsfeed_assignment: {
            /**
             * @description The unique identifier for the newsfeed which is given by Intercom. Publish dates cannot be in the future, to schedule news items use the dedicated feature in app (see this article).
             * @example 198313
             */
            newsfeed_id?: number;
            /**
             * Format: timestamp
             * @description Publish date of the news item on the newsfeed, use this field if you want to set a publish date in the past (e.g. when importing existing news items). On write, this field will be ignored if the news item state is "draft".
             * @example 1674917488
             */
            published_at?: number;
        };
        /**
         * Note
         * @description Notes allow you to annotate and comment on your contacts.
         */
        note: {
            /**
             * @description String representing the object's type. Always has the value `note`.
             * @example note
             */
            type?: string;
            /**
             * @description The id of the note.
             * @example 17495962
             */
            id?: string;
            /**
             * Format: timestamp
             * @description The time the note was created.
             * @example 1674589321
             */
            created_at?: number;
            /** @description Represents the contact that the note was created about. */
            contact?: {
                /** @description String representing the object's type. Always has the value `contact`. */
                type?: string;
                /**
                 * @description The id of the contact.
                 * @example 214656d0c743eafcfde7f248
                 */
                id?: string;
            } | null;
            /** @description Optional. Represents the Admin that created the note. */
            author?: components["schemas"]["admin"];
            /**
             * @description The body text of the note.
             * @example <p>Text for the note.</p>
             */
            body?: string;
        };
        /**
         * Paginated Response
         * @description A paginated list of notes associated with a contact.
         */
        note_list: {
            /**
             * @description String representing the object's type. Always has the value `list`.
             * @example list
             */
            type?: string;
            /** @description An array of notes. */
            data?: components["schemas"]["note"][];
            /**
             * @description A count of the total number of notes.
             * @example 1
             */
            total_count?: number;
            pages?: components["schemas"]["cursor_pages"];
        };
        /**
         * Open Conversation Request
         * @description Payload of the request to open a conversation
         */
        open_conversation_request: {
            /**
             * @example open
             * @enum {string}
             */
            message_type: "open";
            /**
             * @description The id of the admin who is performing the action.
             * @example 5017690
             */
            admin_id: string;
        };
        /**
         * Pagination Object
         * @description The majority of list resources in the API are paginated to allow clients to traverse data over multiple requests.
         *
         *     Their responses are likely to contain a pages object that hosts pagination links which a client can use to paginate through the data without having to construct a query. The link relations for the pages field are as follows.
         *
         */
        pages_link: {
            /**
             * @example pages
             * @enum {string}
             */
            type?: "pages";
            /** @example 1 */
            page?: number;
            /**
             * Format: uri
             * @description A link to the next page of results. A response that does not contain a next link does not have further data to fetch.
             */
            next?: string | null;
            /** @example 50 */
            per_page?: number;
            /** @example 1 */
            total_pages?: number;
        };
        /**
         * Paginated Response
         * @description Paginated Response
         */
        paginated_response: {
            /**
             * @description The type of object
             * @example list
             * @enum {string}
             */
            type?: "list" | "conversation.list";
            pages?: components["schemas"]["cursor_pages"];
            /**
             * @description A count of the total number of objects.
             * @example 1
             */
            total_count?: number;
            /** @description An array of Objects */
            data?: (components["schemas"]["news_item"] | components["schemas"]["newsfeed"])[];
        };
        /**
         * Part attachment
         * @description The file attached to a part
         */
        part_attachment: {
            /**
             * @description The type of attachment
             * @example upload
             */
            type?: string;
            /**
             * @description The name of the attachment
             * @example example.png
             */
            name?: string;
            /**
             * @description The URL of the attachment
             * @example https://picsum.photos/200/300
             */
            url?: string;
            /**
             * @description The content type of the attachment
             * @example image/png
             */
            content_type?: string;
            /**
             * @description The size of the attachment
             * @example 100
             */
            filesize?: number;
            /**
             * @description The width of the attachment
             * @example 100
             */
            width?: number;
            /**
             * @description The height of the attachment
             * @example 100
             */
            height?: number;
        };
        /**
         * Phone Switch
         * @description Phone Switch Response
         */
        phone_switch: {
            /**
             * @default phone_call_redirect
             * @example phone_call_redirect
             * @enum {string}
             */
            type: "phone_call_redirect";
            /**
             * @description Phone number in E.164 format, that has received the SMS to continue the conversation in the Messenger.
             * @example +1 1234567890
             */
            phone?: string;
        } | null;
        redact_conversation_request: {
            /**
             * @description The type of resource being redacted.
             * @example conversation_part
             * @enum {string}
             */
            type: "conversation_part";
            /**
             * @description The id of the conversation.
             * @example 19894788788
             */
            conversation_id: string;
            /**
             * @description The id of the conversation_part.
             * @example 19381789428
             */
            conversation_part_id: string;
        } | {
            /**
             * @description The type of resource being redacted.
             * @example source
             * @enum {string}
             */
            type: "source";
            /**
             * @description The id of the conversation.
             * @example 19894788788
             */
            conversation_id: string;
            /**
             * @description The id of the source.
             * @example 19894781231
             */
            source_id: string;
        };
        /**
         * Reference
         * @description reference to another object
         */
        reference: {
            /** @example contact */
            type?: string;
            /** @example 1a2b3c */
            id?: string | null;
        };
        reply_conversation_request: components["schemas"]["contact_reply_conversation_request"] | components["schemas"]["admin_reply_conversation_request"];
        /**
         * Search data
         * @description Search using Intercoms Search APIs.
         */
        search_request: {
            query: components["schemas"]["single_filter_search_request"] | components["schemas"]["multiple_filter_search_request"];
            pagination?: components["schemas"]["starting_after_paging"];
        };
        /**
         * Segment
         * @description A segment is a group of your contacts defined by the rules that you set.
         */
        segment: {
            /**
             * @description The type of object.
             * @example segment
             * @enum {string}
             */
            type?: "segment";
            /**
             * @description The unique identifier representing the segment.
             * @example 56203d253cba154d39010062
             */
            id?: string;
            /**
             * @description The name of the segment.
             * @example Active
             */
            name?: string;
            /**
             * @description The time the segment was created.
             * @example 1394621988
             */
            created_at?: number;
            /**
             * @description The time the segment was updated.
             * @example 1394622004
             */
            updated_at?: number;
            /**
             * @description Type of the contact: contact (lead) or user.
             * @example contact
             * @enum {string}
             */
            person_type?: "contact" | "user";
            /**
             * @description The number of items in the user segment. It's returned when `include_count=true` is included in the request.
             * @example 3
             */
            count?: number | null;
        };
        /**
         * Segment List
         * @description This will return a list of Segment Objects. The result may also have a pages object if the response is paginated.
         */
        segment_list: {
            /**
             * @description The type of the object
             * @example segment.list
             * @enum {string}
             */
            type?: "segment.list";
            /** @description A list of Segment objects */
            segments?: components["schemas"]["segment"][];
            /** @description A pagination object, which may be empty, indicating no further pages to fetch. */
            pages?: Record<string, never>;
        };
        single_filter_search_request: {
            /**
             * @description The Intercom defined id representing the company.
             * @example custom_attributes.social_network
             */
            field?: string;
            /**
             * @description The Intercom defined id representing the company.
             * @example =
             * @enum {string}
             */
            operator?: "=" | "!=" | "IN" | "NIN" | "<" | ">" | "~" | "!~" | "^" | "$";
            /**
             * @description The Intercom defined id representing the company.
             * @example facebook
             */
            value?: string;
        };
        /**
         * Applied SLA
         * @description The SLA Applied object contains the details for which SLA has been applied to this conversation.
         *     Important: if there are any canceled sla_events for the conversation - meaning an SLA has been manually removed from a conversation, the sla_status will always be returned as null.
         *
         */
        sla_applied: {
            /**
             * @description object type
             * @example conversation_sla_summary
             */
            type?: string;
            /**
             * @description The name of the SLA as given by the teammate when it was created.
             * @example
             */
            sla_name?: string;
            /**
             * @description SLA statuses:
             *                 - `hit`: If there’s at least one hit event in the underlying sla_events table, and no “missed” or “canceled” events for the conversation.
             *                 - `missed`: If there are any missed sla_events for the conversation and no canceled events. If there’s even a single missed sla event, the status will always be missed. A missed status is not applied when the SLA expires, only the next time a teammate replies.
             *                 - `active`: An SLA has been applied to a conversation, but has not yet been fulfilled. SLA status is active only if there are no “hit, “missed”, or “canceled” events.
             * @example hit
             * @enum {string}
             */
            sla_status?: "hit" | "missed" | "cancelled" | "active";
        } | null;
        /**
         * Snooze Conversation Request
         * @description Payload of the request to snooze a conversation
         */
        snooze_conversation_request: {
            /**
             * @example snoozed
             * @enum {string}
             */
            message_type: "snoozed";
            /**
             * @description The id of the admin who is performing the action.
             * @example 5017691
             */
            admin_id: string;
            /**
             * Format: timestamp
             * @description The time you want the conversation to reopen.
             * @example 1673609604
             */
            snoozed_until: number;
        };
        /**
         * Social Profile
         * @description A Social Profile allows you to label your contacts, companies, and conversations and list them using that Social Profile.
         */
        social_profile: {
            /**
             * @description value is "social_profile"
             * @example social_profile
             */
            type?: string;
            /**
             * @description The name of the Social media profile
             * @example Facebook
             */
            name?: string;
            /**
             * Format: uri
             * @description The name of the Social media profile
             * @example http://twitter.com/th1sland
             */
            url?: string;
        };
        /** StartingAfterPaging */
        starting_after_paging: {
            /** @example 2 */
            page?: number;
            /** @example 1HaSB+xrOyyMXAkS/c1RteCL7BzOzTvYjmjakgTergIH31eoe2v4/sbLsJWP\nIncfQLD3ouPkZlCwJ86F\n */
            starting_after?: string;
        } | null;
        /**
         * Subscription Types
         * @description A subscription type lets customers easily opt out of non-essential communications without missing what's important to them.
         */
        subscription_type: {
            /**
             * @description The type of the object - subscription
             * @example subscription
             */
            type?: string;
            /**
             * @description The unique identifier representing the subscription type.
             * @example 123456
             */
            id?: string;
            /**
             * @description The state of the subscription type.
             * @example live
             * @enum {string}
             */
            state?: "live" | "draft" | "archived";
            default_translation?: components["schemas"]["translation"];
            /** @description An array of translations objects with the localised version of the subscription type in each available locale within your translation settings. */
            translations?: components["schemas"]["translation"][];
            /**
             * @description Describes the type of consent.
             * @example opt_in
             * @enum {string}
             */
            consent_type?: "opt_out" | "opt_in";
            /** @description The message types that this subscription supports - can contain `email` or `sms_message`. */
            content_types?: ("email" | "sms_message")[];
        };
        /**
         * Subscription Types
         * @description A list of subscription type objects.
         */
        subscription_type_list: {
            /**
             * @description The type of the object
             * @example list
             * @enum {string}
             */
            type?: "list";
            /** @description A list of subscription type objects associated with the workspace . */
            data?: components["schemas"]["subscription_type"][];
        };
        /**
         * Tag
         * @description A tag allows you to label your contacts, companies, and conversations and list them using that tag.
         */
        tag: {
            /**
             * @description value is "tag"
             * @example tag
             */
            type?: string;
            /**
             * @description The id of the tag
             * @example 123456
             */
            id?: string;
            /**
             * @description The name of the tag
             * @example Test tag
             */
            name?: string;
            /**
             * Format: date-time
             * @description The time when the tag was applied to the object
             * @example 1663597223
             */
            applied_at?: number;
            applied_by?: components["schemas"]["reference"];
        };
        /**
         * Tag Company Request Payload
         * @description You can tag a single company or a list of companies.
         */
        tag_company_request: {
            /**
             * @description The name of the tag, which will be created if not found.
             * @example Independent
             */
            name: string;
            /** @description The id or company_id of the company can be passed as input parameters. */
            companies: {
                /**
                 * @description The Intercom defined id representing the company.
                 * @example 531ee472cce572a6ec000006
                 */
                id?: string;
                /**
                 * @description The company id you have defined for the company.
                 * @example 6
                 */
                company_id?: string;
            }[];
        };
        /**
         * Tags
         * @description A list of tags objects in the workspace.
         */
        tag_list: {
            /**
             * @description The type of the object
             * @example list
             * @enum {string}
             */
            type?: "list";
            /** @description A list of tags objects associated with the workspace . */
            data?: components["schemas"]["tag"][];
        };
        /**
         * Tag Users Request Payload
         * @description You can tag a list of users.
         */
        tag_multiple_users_request: {
            /**
             * @description The name of the tag, which will be created if not found.
             * @example Independent
             */
            name: string;
            users: {
                /**
                 * @description The Intercom defined id representing the user.
                 * @example 5f7f0d217289f8d2f4262080
                 */
                id?: string;
            }[];
        };
        /**
         * Tags
         * @description A list of tags objects associated with a conversation
         */
        tags: {
            /**
             * @description The type of the object
             * @example tag.list
             * @enum {string}
             */
            type?: "tag.list";
            /** @description A list of tags objects associated with the conversation. */
            tags?: components["schemas"]["tag"][];
        };
        /**
         * Team
         * @description Teams are groups of admins in Intercom.
         */
        team: {
            /**
             * @description Value is always "team"
             * @example team
             */
            type?: string;
            /**
             * @description The id of the team
             * @example 814865
             */
            id?: string;
            /**
             * @description The name of the team
             * @example Example Team
             */
            name?: string;
            /**
             * @description The list of admin IDs that are a part of the team.
             * @example [
             *       493881
             *     ]
             */
            admin_ids?: number[];
            admin_priority_level?: components["schemas"]["admin_priority_level"];
        };
        /**
         * Team List
         * @description This will return a list of team objects for the App.
         */
        team_list: {
            /**
             * @description The type of the object
             * @example team.list
             * @enum {string}
             */
            type?: "team.list";
            /** @description A list of team objects */
            teams?: components["schemas"]["team"][];
        };
        /**
         * Team Priority Level
         * @description Admin priority levels for teams
         */
        team_priority_level: {
            /**
             * @description The primary team ids for the team
             * @example [
             *       814865
             *     ]
             */
            primary_team_ids?: number[] | null;
            /**
             * @description The secondary team ids for the team
             * @example [
             *       493881
             *     ]
             */
            secondary_team_ids?: number[] | null;
        } | null;
        /**
         * Ticket
         * @description Tickets are how you track requests from your users.
         */
        ticket: {
            /**
             * @description Always ticket
             * @default ticket
             * @example ticket
             * @enum {string}
             */
            type: "ticket";
            /**
             * @description The unique identifier for the ticket which is given by Intercom.
             * @example 1295
             */
            id?: string;
            /**
             * @description The ID of the Ticket used in the Intercom Inbox and Messenger. Do not use ticket_id for API queries.
             * @example 1390
             */
            ticket_id?: string;
            /**
             * @description Category of the Ticket.
             * @example Customer
             * @enum {string}
             */
            category?: "Customer" | "Back-office" | "Tracker";
            ticket_attributes?: components["schemas"]["ticket_custom_attributes"];
            /**
             * @description The state the ticket is currenly in
             * @example submitted
             * @enum {string}
             */
            ticket_state?: "submitted" | "in_progress" | "waiting_on_customer" | "resolved" | "closed";
            ticket_type?: components["schemas"]["ticket_type"];
            contacts?: components["schemas"]["ticket_contacts"];
            /**
             * @description The id representing the admin assigned to the ticket.
             * @example 1295
             */
            admin_assignee_id?: string;
            /**
             * @description The id representing the team assigned to the ticket.
             * @example 1295
             */
            team_assignee_id?: string;
            /**
             * Format: date-time
             * @description The time the ticket was created as a UTC Unix timestamp.
             * @example 1663597223
             */
            created_at?: number;
            /**
             * Format: date-time
             * @description The last time the ticket was updated as a UTC Unix timestamp.
             * @example 1663597260
             */
            updated_at?: number;
            /**
             * @description Whether or not the ticket is open. If false, the ticket is closed.
             * @example true
             */
            open?: boolean;
            /**
             * Format: date-time
             * @description The time the ticket will be snoozed until as a UTC Unix timestamp. If null, the ticket is not currently snoozed.
             * @example 1663597260
             */
            snoozed_until?: number;
            linked_objects?: components["schemas"]["linked_object_list"];
            ticket_parts?: components["schemas"]["ticket_parts"];
            /**
             * @description Whether or not the ticket is shared with the customer.
             * @example true
             */
            is_shared?: boolean;
        } | null;
        /**
         * Contacts
         * @description The list of contacts affected by a ticket.
         */
        ticket_contacts: {
            /**
             * @description always contact.list
             * @example contact.list
             * @enum {string}
             */
            type?: "contact.list";
            /** @description The list of contacts affected by this ticket. */
            contacts?: components["schemas"]["contact_reference"][];
        };
        /**
         * Ticket Attributes
         * @description An object containing the different attributes associated to the ticket as key-value pairs. For the default title and description attributes, the keys are `_default_title_` and `_default_description_`.
         * @example {
         *       "name": "example",
         *       "question": "Can I have some help?"
         *     }
         */
        ticket_custom_attributes: {
            [key: string]: ((string | null) | number | boolean | unknown[] | components["schemas"]["file_attribute"]) | undefined;
        };
        /**
         * Ticket List
         * @description Tickets are how you track requests from your users.
         */
        ticket_list: {
            /**
             * @description Always ticket.list
             * @example ticket.list
             * @enum {string}
             */
            type?: "ticket.list";
            /** @description The list of ticket objects */
            tickets?: components["schemas"]["ticket"][];
            /**
             * @description A count of the total number of objects.
             * @example 12345
             */
            total_count?: number;
            pages?: components["schemas"]["cursor_pages"];
        };
        /**
         * Ticket Part
         * @description A Ticket Part represents a message in the ticket.
         */
        ticket_part: {
            /**
             * @description Always ticket_part
             * @example ticket_part
             */
            type?: string;
            /**
             * @description The id representing the ticket part.
             * @example 3
             */
            id?: string;
            /**
             * @description The type of ticket part.
             * @example comment
             */
            part_type?: string;
            /**
             * @description The message body, which may contain HTML.
             * @example <p>Okay!</p>
             */
            body?: string | null;
            /**
             * @description The previous state of the ticket.
             * @example submitted
             * @enum {string}
             */
            previous_ticket_state?: "submitted" | "in_progress" | "waiting_on_customer" | "resolved";
            /**
             * @description The state of the ticket.
             * @example submitted
             * @enum {string}
             */
            ticket_state?: "submitted" | "in_progress" | "waiting_on_customer" | "resolved";
            /**
             * Format: date-time
             * @description The time the ticket part was created.
             * @example 1663597223
             */
            created_at?: number;
            /**
             * Format: date-time
             * @description The last time the ticket part was updated.
             * @example 1663597260
             */
            updated_at?: number;
            /** @description The id of the admin that was assigned the ticket by this ticket_part (null if there has been no change in assignment.) */
            assigned_to?: components["schemas"]["reference"];
            author?: components["schemas"]["ticket_part_author"];
            /**
             * Ticket part attachments
             * @description A list of attachments for the part.
             */
            attachments?: components["schemas"]["part_attachment"][];
            /**
             * @description The external id of the ticket part
             * @example abcd1234
             */
            external_id?: string | null;
            /**
             * @description Whether or not the ticket part has been redacted.
             * @example false
             */
            redacted?: boolean;
        };
        /**
         * Ticket part author
         * @description The author that wrote or triggered the part. Can be a bot, admin, team or user.
         */
        ticket_part_author: {
            /**
             * @description The type of the author
             * @example admin
             * @enum {string}
             */
            type?: "admin" | "bot" | "team" | "user";
            /**
             * @description The id of the author
             * @example 274
             */
            id?: string;
            /**
             * @description The name of the author
             * @example Operator
             */
            name?: string | null;
            /**
             * Format: email
             * @description The email of the author
             * @example operator+abcd1234@intercom.io
             */
            email?: string;
        };
        /**
         * Ticket Parts
         * @description A list of Ticket Part objects for each note and event in the ticket. There is a limit of 500 parts.
         */
        ticket_parts: {
            /**
             * @example ticket_part.list
             * @enum {string}
             */
            type?: "ticket_part.list";
            /**
             * Tickt Parts
             * @description A list of Ticket Part objects for each ticket. There is a limit of 500 parts.
             */
            ticket_parts?: components["schemas"]["ticket_part"][];
            /** @example 2 */
            total_count?: number;
        };
        /**
         * A Ticket Part representing a note, comment, or quick_reply on a ticket
         * @description A Ticket Part representing a note, comment, or quick_reply on a ticket
         */
        ticket_reply: {
            /**
             * @description Always ticket_part
             * @example ticket_part
             * @enum {string}
             */
            type?: "ticket_part";
            /**
             * @description The id representing the part.
             * @example 3
             */
            id?: string;
            /**
             * @description Type of the part
             * @example note
             * @enum {string}
             */
            part_type?: "note" | "comment" | "quick_reply";
            /**
             * @description The message body, which may contain HTML.
             * @example <p>Okay!</p>
             */
            body?: string | null;
            /**
             * Format: date-time
             * @description The time the note was created.
             * @example 1663597223
             */
            created_at?: number;
            /**
             * Format: date-time
             * @description The last time the note was updated.
             * @example 1663597260
             */
            updated_at?: number;
            author?: components["schemas"]["ticket_part_author"];
            /**
             * Ticket part attachments
             * @description A list of attachments for the part.
             */
            attachments?: components["schemas"]["part_attachment"][];
            /**
             * @description Whether or not the ticket part has been redacted.
             * @example false
             */
            redacted?: boolean;
        };
        /**
         * Ticket Attributes
         * @description The attributes set on the ticket. When setting the default title and description attributes, the attribute keys that should be used are `_default_title_` and `_default_description_`. When setting ticket type attributes of the list attribute type, the key should be the attribute name and the value of the attribute should be the list item id, obtainable by [listing the ticket type](ref:get_ticket-types). For example, if the ticket type has an attribute called `priority` of type `list`, the key should be `priority` and the value of the attribute should be the guid of the list item (e.g. `de1825a0-0164-4070-8ca6-13e22462fa7e`).
         * @example {
         *       "name": "example",
         *       "question": "Can I have some help?"
         *     }
         */
        ticket_request_custom_attributes: {
            [key: string]: ((string | null) | number | boolean | unknown[]) | undefined;
        };
        /**
         * Ticket Type
         * @description A ticket type, used to define the data fields to be captured in a ticket.
         */
        ticket_type: {
            /**
             * @description String representing the object's type. Always has the value `ticket_type`.
             * @example ticket_type
             */
            type?: string;
            /**
             * @description The id representing the ticket type.
             * @example 1295
             */
            id?: string;
            /**
             * @description Category of the Ticket Type.
             * @example Customer
             * @enum {string}
             */
            category?: "Customer" | "Back-office" | "Tracker";
            /**
             * @description The name of the ticket type
             * @example Bug
             */
            name?: string;
            /**
             * @description The description of the ticket type
             * @example A bug that has been reported.
             */
            description?: string;
            /**
             * @description The icon of the ticket type
             * @example 🐞
             */
            icon?: string;
            /**
             * @description The id of the workspace that the ticket type belongs to.
             * @example ecahpwf5
             */
            workspace_id?: string;
            ticket_type_attributes?: components["schemas"]["ticket_type_attribute_list"];
            /**
             * @description Whether the ticket type is archived or not.
             * @example false
             */
            archived?: boolean;
            /**
             * Format: timestamp
             * @description The date and time the ticket type was created.
             */
            created_at?: number;
            /**
             * Format: timestamp
             * @description The date and time the ticket type was last updated.
             */
            updated_at?: number;
        } | null;
        /**
         * Ticket Type Attribute
         * @description Ticket type attribute, used to define each data field to be captured in a ticket.
         */
        ticket_type_attribute: {
            /**
             * @description String representing the object's type. Always has the value `ticket_type_attribute`.
             * @example ticket_type_attribute
             */
            type?: string;
            /**
             * @description The id representing the ticket type attribute.
             * @example 1
             */
            id?: string;
            /**
             * @description The id of the workspace that the ticket type attribute belongs to.
             * @example ecahpwf5
             */
            workspace_id?: string;
            /**
             * @description The name of the ticket type attribute
             * @example Title
             */
            name?: string;
            /**
             * @description The description of the ticket type attribute
             * @example Bug title.
             */
            description?: string;
            /**
             * @description The type of the data attribute (allowed values: "string list integer decimal boolean datetime files")
             * @example string
             */
            data_type?: string;
            /**
             * @description Input options for the attribute
             * @example multiline: true
             */
            input_options?: Record<string, never>;
            /**
             * @description The order of the attribute against other attributes
             * @example 1
             */
            order?: number;
            /**
             * @description Whether the attribute is required or not for teammates.
             * @default false
             * @example false
             */
            required_to_create: boolean;
            /**
             * @description Whether the attribute is required or not for contacts.
             * @default false
             * @example false
             */
            required_to_create_for_contacts: boolean;
            /**
             * @description Whether the attribute is visible or not to teammates.
             * @default true
             * @example false
             */
            visible_on_create: boolean;
            /**
             * @description Whether the attribute is visible or not to contacts.
             * @default true
             * @example false
             */
            visible_to_contacts: boolean;
            /**
             * @description Whether the attribute is built in or not.
             * @example true
             */
            default?: boolean;
            /**
             * @description The id of the ticket type that the attribute belongs to.
             * @example 42
             */
            ticket_type_id?: number;
            /**
             * @description Whether the ticket type attribute is archived or not.
             * @example false
             */
            archived?: boolean;
            /**
             * Format: timestamp
             * @description The date and time the ticket type attribute was created.
             */
            created_at?: number;
            /**
             * Format: timestamp
             * @description The date and time the ticket type attribute was last updated.
             */
            updated_at?: number;
        } | null;
        /**
         * Ticket Type Attributes
         * @description A list of attributes associated with a given ticket type.
         */
        ticket_type_attribute_list: {
            /** @description String representing the object's type. Always has the value `ticket_type_attributes.list`. */
            type?: string;
            /** @description A list of ticket type attributes associated with a given ticket type. */
            ticket_type_attributes?: components["schemas"]["ticket_type_attribute"][];
        };
        /**
         * Ticket Types
         * @description A list of ticket types associated with a given workspace.
         */
        ticket_type_list: {
            /** @description String representing the object's type. Always has the value `ticket_type.list`. */
            type?: string;
            /** @description A list of ticket_types associated with a given workspace. */
            ticket_types?: components["schemas"]["ticket_type"][];
        };
        /**
         * Translation
         * @description A translation object contains the localised details of a subscription type.
         */
        translation: {
            /**
             * @description The localised name of the subscription type.
             * @example Announcements
             */
            name?: string;
            /**
             * @description The localised description of the subscription type.
             * @example Offers, product and feature announcements
             */
            description?: string;
            /**
             * @description The two character identifier for the language of the translation object.
             * @example en
             */
            locale?: string;
        };
        /**
         * Untag Company Request Payload
         * @description You can tag a single company or a list of companies.
         */
        untag_company_request: {
            /**
             * @description The name of the tag which will be untagged from the company
             * @example Independent
             */
            name: string;
            /** @description The id or company_id of the company can be passed as input parameters. */
            companies: {
                /**
                 * @description The Intercom defined id representing the company.
                 * @example 531ee472cce572a6ec000006
                 */
                id?: string;
                /**
                 * @description The company id you have defined for the company.
                 * @example 6
                 */
                company_id?: string;
                /**
                 * @description Always set to true
                 * @example true
                 */
                untag?: boolean;
            }[];
        };
        /**
         * Update Article Request Payload
         * @description You can Update an Article
         */
        update_article_request: {
            /**
             * @description The title of the article.For multilingual articles, this will be the title of the default language's content.
             * @example Thanks for everything
             */
            title?: string;
            /**
             * @description The description of the article. For multilingual articles, this will be the description of the default language's content.
             * @example Description of the Article
             */
            description?: string;
            /**
             * @description The content of the article. For multilingual articles, this will be the body of the default language's content.
             * @example <p>This is the body in html</p>
             */
            body?: string;
            /**
             * @description The id of the author of the article. For multilingual articles, this will be the id of the author of the default language's content. Must be a teammate on the help center's workspace.
             * @example 1295
             */
            author_id?: number;
            /**
             * @description Whether the article will be `published` or will be a `draft`. Defaults to draft. For multilingual articles, this will be the state of the default language's content.
             * @example draft
             * @enum {string}
             */
            state?: "published" | "draft";
            /**
             * @description The id of the article's parent collection or section. An article without this field stands alone.
             * @example 18
             */
            parent_id?: string;
            /**
             * @description The type of parent, which can either be a `collection` or `section`.
             * @example collection
             */
            parent_type?: string;
            translated_content?: components["schemas"]["article_translated_content"];
        } | null;
        /**
         * Update Collection Request Payload
         * @description You can update a collection
         */
        update_collection_request: {
            /**
             * @description The name of the collection. For multilingual collections, this will be the name of the default language's content.
             * @example collection 51
             */
            name?: string;
            /**
             * @description The description of the collection. For multilingual collections, this will be the description of the default language's content.
             * @example English description
             */
            description?: string;
            translated_content?: components["schemas"]["group_translated_content"];
            /**
             * @description The id of the parent collection. If `null` then it will be updated as the first level collection.
             * @example 6871118
             */
            parent_id?: string | null;
        };
        /**
         * Update Contact Request Payload
         * @description You can update a contact
         */
        update_contact_request: {
            /** @description The role of the contact. */
            role?: string;
            /** @description A unique identifier for the contact which is given to Intercom */
            external_id?: string;
            /**
             * @description The contacts email
             * @example jdoe@example.com
             */
            email?: string;
            /**
             * @description The contacts phone
             * @example +353871234567
             */
            phone?: string | null;
            /**
             * @description The contacts name
             * @example John Doe
             */
            name?: string | null;
            /**
             * @description An image URL containing the avatar of a contact
             * @example https://www.example.com/avatar_image.jpg
             */
            avatar?: string | null;
            /**
             * Format: date-time
             * @description The time specified for when a contact signed up
             * @example 1571672154
             */
            signed_up_at?: number | null;
            /**
             * Format: date-time
             * @description The time when the contact was last seen (either where the Intercom Messenger was installed or when specified manually)
             * @example 1571672154
             */
            last_seen_at?: number | null;
            /**
             * @description The id of an admin that has been assigned account ownership of the contact
             * @example 123
             */
            owner_id?: number | null;
            /**
             * @description Whether the contact is unsubscribed from emails
             * @example true
             */
            unsubscribed_from_emails?: boolean | null;
            /** @description The custom attributes which are set for the contact */
            custom_attributes?: Record<string, never>;
        };
        /**
         * Create Content Import Source Payload
         * @description You can modify a Content Import Source of your Fin Content Library.
         */
        update_content_import_source_request: {
            /**
             * @description If you intend to create or update External Pages via the API, this should be set to `api`. You can not change the value to or from api.
             * @example api
             * @enum {string}
             */
            sync_behavior: "api" | "automated" | "manual";
            /**
             * @description The status of the content import source.
             * @default active
             * @example active
             * @enum {string}
             */
            status: "active" | "deactivated";
            /**
             * @description The URL of the content import source. This may only be different from the existing value if the sync behavior is API.
             * @example https://help.example.com
             */
            url: string;
        };
        /**
         * Update Conversation Request
         * @description Payload of the request to update a conversation
         */
        update_conversation_request: {
            /**
             * @description Mark a conversation as read within Intercom.
             * @example true
             */
            read?: boolean;
            custom_attributes?: components["schemas"]["custom_attributes"];
        };
        /** Update Data Attribute Request */
        update_data_attribute_request: {
            /**
             * @description Whether the attribute is to be archived or not.
             * @example false
             */
            archived?: boolean;
            /**
             * @description The readable description you see in the UI for the attribute.
             * @example My Data Attribute Description
             */
            description?: string;
            /**
             * @description To create list attributes. Provide a set of hashes with `value` as the key of the options you want to make. `data_type` must be `string`.
             * @example [
             *       "option1",
             *       "option2"
             *     ]
             */
            options?: string[];
        };
        /**
         * Update External Page Payload
         * @description You can update an External Page in your Fin Content Library.
         */
        update_external_page_request: {
            /**
             * @description The title of the external page.
             * @example Getting started with...
             */
            title: string;
            /**
             * @description The body of the external page in HTML.
             * @example <p>Hello world!</p>
             */
            html: string;
            /**
             * @description The URL of the external page. This will be used by Fin to link end users to the page it based its answer on.
             * @example https://help.example.com/en/articles/1234-getting-started
             */
            url: string;
            /**
             * @description Whether the external page should be used to answer questions by Fin.
             * @default true
             * @example true
             */
            fin_availability: boolean;
            /**
             * @description Always en
             * @default en
             * @example en
             * @enum {string}
             */
            locale: "en";
            /**
             * @description The unique identifier for the source of the external page which was given by Intercom. Every external page must be associated with a Content Import Source which represents the place it comes from and from which it inherits a default audience (configured in the UI). For a new source, make a POST request to the Content Import Source endpoint and an ID for the source will be returned in the response.
             * @example 1234
             */
            source_id: number;
            /**
             * @description The identifier for the external page which was given by the source. Must be unique for the source.
             * @example 5678
             */
            external_id?: string;
        };
        /**
         * Update Ticket Request Payload
         * @description You can update a Ticket
         */
        update_ticket_request: {
            /**
             * @description The attributes set on the ticket.
             * @example {
             *       "title": "example",
             *       "description": "having a problem"
             *     }
             */
            ticket_attributes?: Record<string, never>;
            /**
             * @description The state of the ticket.
             * @example submitted
             * @enum {string}
             */
            state?: "in_progress" | "waiting_on_customer" | "resolved";
            /**
             * @description Specify if a ticket is open. Set to false to close a ticket. Closing a ticket will also unsnooze it.
             * @example true
             */
            open?: boolean;
            /**
             * @description Specify whether the ticket is visible to users.
             * @example true
             */
            is_shared?: boolean;
            /**
             * Format: timestamp
             * @description The time you want the ticket to reopen.
             * @example 1673609604
             */
            snoozed_until?: number;
            assignment?: {
                /**
                 * @description The ID of the admin performing the action.
                 * @example 123
                 */
                admin_id?: string;
                /**
                 * @description The ID of the admin or team to which the ticket is assigned. Set this 0 to unassign it.
                 * @example 123
                 */
                assignee_id?: string;
            };
        };
        /**
         * Update Ticket Type Attribute Request Payload
         * @description You can update a Ticket Type Attribute
         */
        update_ticket_type_attribute_request: {
            /**
             * @description The name of the ticket type attribute
             * @example Bug Priority
             */
            name?: string;
            /**
             * @description The description of the attribute presented to the teammate or contact
             * @example Priority level of the bug
             */
            description?: string;
            /**
             * @description Whether the attribute is required to be filled in when teammates are creating the ticket in Inbox.
             * @default false
             * @example false
             */
            required_to_create: boolean;
            /**
             * @description Whether the attribute is required to be filled in when contacts are creating the ticket in Messenger.
             * @default false
             * @example false
             */
            required_to_create_for_contacts: boolean;
            /**
             * @description Whether the attribute is visible to teammates when creating a ticket in Inbox.
             * @default true
             * @example true
             */
            visible_on_create: boolean;
            /**
             * @description Whether the attribute is visible to contacts when creating a ticket in Messenger.
             * @default true
             * @example true
             */
            visible_to_contacts: boolean;
            /**
             * @description Whether the attribute allows multiple lines of text (only applicable to string attributes)
             * @example false
             */
            multiline?: boolean;
            /**
             * @description A comma delimited list of items for the attribute value (only applicable to list attributes)
             * @example Low Priority,Medium Priority,High Priority
             */
            list_items?: string;
            /**
             * @description Whether the attribute allows multiple files to be attached to it (only applicable to file attributes)
             * @example false
             */
            allow_multiple_values?: boolean;
            /**
             * @description Whether the attribute should be archived and not shown during creation of the ticket (it will still be present on previously created tickets)
             * @example false
             */
            archived?: boolean;
        };
        /**
         * Update Ticket Type Request Payload
         * @description The request payload for updating a ticket type.
         *     You can copy the `icon` property for your ticket type from [Twemoji Cheatsheet](https://twemoji-cheatsheet.vercel.app/)
         *
         */
        update_ticket_type_request: {
            /**
             * @description The name of the ticket type.
             * @example Bug
             */
            name?: string;
            /**
             * @description The description of the ticket type.
             * @example A bug has been occured
             */
            description?: string;
            /**
             * @description Category of the Ticket Type.
             * @example Customer
             * @enum {string}
             */
            category?: "Customer" | "Back-office" | "Tracker";
            /**
             * @description The icon of the ticket type.
             * @default 🎟️
             * @example 🐞
             */
            icon: string;
            /**
             * @description The archived status of the ticket type.
             * @example false
             */
            archived?: boolean;
            /**
             * @description Whether the tickets associated with this ticket type are intended for internal use only or will be shared with customers. This is currently a limited attribute.
             * @default false
             * @example false
             */
            is_internal: boolean;
        } | null;
        /**
         * Update Visitor Request Payload
         * @description Update an existing visitor.
         */
        update_visitor_request: {
            /**
             * @description A unique identified for the visitor which is given by Intercom.
             * @example 8a88a590-e
             */
            id?: string;
            /**
             * @description A unique identified for the visitor which is given by you.
             * @example 123
             */
            user_id?: string;
            /**
             * @description The visitor's name.
             * @example Christian Bale
             */
            name?: string;
            /**
             * @description The custom attributes which are set for the visitor.
             * @example {
             *       "paid_subscriber": true,
             *       "monthly_spend": 155.5,
             *       "team_mates": 9
             *     }
             */
            custom_attributes?: {
                [key: string]: string | undefined;
            };
        } | unknown | unknown;
        /**
         * Visitor
         * @description Visitors are useful for representing anonymous people that have not yet been identified. They usually represent website visitors. Visitors are not visible in Intercom platform. The Visitors resource provides methods to fetch, update, convert and delete.
         */
        visitor: {
            /**
             * @description Value is 'visitor'
             * @default visitor
             * @example visitor
             */
            type: string;
            /**
             * @description The Intercom defined id representing the Visitor.
             * @example 530370b477ad7120001d
             */
            id?: string;
            /**
             * @description Automatically generated identifier for the Visitor.
             * @example 8a88a590-e1c3-41e2-a502-e0649dbf721c
             */
            user_id?: string;
            /**
             * @description Identifies if this visitor is anonymous.
             * @example false
             */
            anonymous?: boolean;
            /**
             * Format: email
             * @description The email of the visitor.
             * @example jane.doe@example.com
             */
            email?: string;
            /**
             * @description The phone number of the visitor.
             * @example 555-555-5555
             */
            phone?: string | null;
            /**
             * @description The name of the visitor.
             * @example Jane Doe
             */
            name?: string | null;
            /**
             * @description The pseudonym of the visitor.
             * @example Red Duck from Dublin
             */
            pseudonym?: string | null;
            avatar?: {
                /**
                 * @default avatar
                 * @example avatar
                 */
                type: string;
                /**
                 * Format: uri
                 * @description This object represents the avatar associated with the visitor.
                 * @example https://example.com/avatar.png
                 */
                image_url?: string | null;
            };
            /**
             * @description The id of the app the visitor is associated with.
             * @example hfi1bx4l
             */
            app_id?: string;
            companies?: {
                /**
                 * @description The type of the object
                 * @example company.list
                 * @enum {string}
                 */
                type?: "company.list";
                companies?: components["schemas"]["company"][];
            };
            location_data?: {
                /**
                 * @default location_data
                 * @example location_data
                 */
                type: string;
                /**
                 * @description The city name of the visitor.
                 * @example Dublin
                 */
                city_name?: string;
                /**
                 * @description The continent code of the visitor.
                 * @example EU
                 */
                continent_code?: string;
                /**
                 * @description The country code of the visitor.
                 * @example IRL
                 */
                country_code?: string;
                /**
                 * @description The country name of the visitor.
                 * @example Ireland
                 */
                country_name?: string;
                /**
                 * @description The postal code of the visitor.
                 * @example D02 N960
                 */
                postal_code?: string;
                /**
                 * @description The region name of the visitor.
                 * @example Leinster
                 */
                region_name?: string;
                /**
                 * @description The timezone of the visitor.
                 * @example Europe/Dublin
                 */
                timezone?: string;
            };
            /**
             * @description The time the Lead last recorded making a request.
             * @example 1663597260
             */
            las_request_at?: number;
            /**
             * @description The time the Visitor was added to Intercom.
             * @example 1663597223
             */
            created_at?: number;
            /**
             * @description The time the Visitor was added to Intercom.
             * @example 1663597223
             */
            remote_created_at?: number;
            /**
             * @description The time the Visitor signed up for your product.
             * @example 1663597223
             */
            signed_up_at?: number;
            /**
             * @description The last time the Visitor was updated.
             * @example 1663597260
             */
            updated_at?: number;
            /**
             * @description The number of sessions the Visitor has had.
             * @example 1
             */
            session_count?: number;
            social_profiles?: {
                /**
                 * @description The type of the object
                 * @example social_profile.list
                 * @enum {string}
                 */
                type?: "social_profile.list";
                social_profiles?: string[];
            };
            /**
             * @description The id of the admin that owns the Visitor.
             * @example 5169261
             */
            owner_id?: string | null;
            /**
             * @description Whether the Visitor is unsubscribed from emails.
             * @example false
             */
            unsubscribed_from_emails?: boolean;
            /**
             * @description Identifies if this visitor has marked an email as spam.
             * @example false
             */
            marked_email_as_spam?: boolean;
            /**
             * @description Identifies if this visitor has had a hard bounce.
             * @example false
             */
            has_hard_bounced?: boolean;
            tags?: {
                /**
                 * @description The type of the object
                 * @example tag.list
                 * @enum {string}
                 */
                type?: "tag.list";
                tags?: {
                    /**
                     * @description The type of the object
                     * @example tag
                     * @enum {string}
                     */
                    type?: "tag";
                    /**
                     * @description The id of the tag.
                     * @example 8482
                     */
                    id?: string;
                    /**
                     * @description The name of the tag.
                     * @example tag_name
                     */
                    name?: string;
                }[];
            };
            segments?: {
                /**
                 * @description The type of the object
                 * @example segment.list
                 * @enum {string}
                 */
                type?: "segment.list";
                segments?: string[];
            };
            /** @description The custom attributes you have set on the Visitor. */
            custom_attributes?: {
                [key: string]: string | undefined;
            };
            /**
             * @description The referer of the visitor.
             * @example https://www.google.com/
             */
            referrer?: string | null;
            /**
             * @description The utm_campaign of the visitor.
             * @example intercom-link
             */
            utm_campaign?: string | null;
            /**
             * @description The utm_content of the visitor.
             * @example banner
             */
            utm_content?: string | null;
            /**
             * @description The utm_medium of the visitor.
             * @example email
             */
            utm_medium?: string | null;
            /**
             * @description The utm_source of the visitor.
             * @example Intercom
             */
            utm_source?: string | null;
            /**
             * @description The utm_term of the visitor.
             * @example messenger
             */
            utm_term?: string | null;
            /**
             * @description Identifies if this visitor has do not track enabled.
             * @example false
             */
            do_not_track?: boolean | null;
        } | null;
        /**
         * Visitor Deleted Object
         * @description Response returned when an object is deleted
         */
        visitor_deleted_object: {
            /**
             * @description The unique identifier for the visitor which is given by Intercom.
             * @example 530370b477ad7120001d
             */
            id?: string;
            /**
             * @description The type of object which was deleted
             * @example visitor
             * @enum {string}
             */
            type?: "visitor";
            /**
             * @description Automatically generated identifier for the Visitor.
             * @example 8a88a590-e1c3-41e2-a502-e0649dbf721c
             */
            user_id?: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    identifyAdmin: {
        parameters: {
            query?: never;
            header?: {
                "Intercom-Version"?: components["schemas"]["intercom_version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["admin_with_app"];
                };
            };
        };
    };
    setAwayAdmin: {
        parameters: {
            query?: never;
            header?: {
                "Intercom-Version"?: components["schemas"]["intercom_version"];
            };
            path: {
                /** @description The unique identifier of a given admin */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /**
                     * @description Set to "true" to change the status of the admin to away.
                     * @default true
                     * @example true
                     */
                    away_mode_enabled: boolean;
                    /**
                     * @description Set to "true" to assign any new conversation replies to your default inbox.
                     * @default false
                     * @example false
                     */
                    away_mode_reassign: boolean;
                };
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["admin"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
            /** @description Admin not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    listActivityLogs: {
        parameters: {
            query: {
                /**
                 * @description The start date that you request data for. It must be formatted as a UNIX timestamp.
                 * @example 1677253093
                 */
                created_at_after: string;
                /**
                 * @description The end date that you request data for. It must be formatted as a UNIX timestamp.
                 * @example 1677861493
                 */
                created_at_before?: string;
            };
            header?: {
                "Intercom-Version"?: components["schemas"]["intercom_version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["activity_log_list"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    listAdmins: {
        parameters: {
            query?: never;
            header?: {
                "Intercom-Version"?: components["schemas"]["intercom_version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["admin_list"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    retrieveAdmin: {
        parameters: {
            query?: never;
            header?: {
                "Intercom-Version"?: components["schemas"]["intercom_version"];
            };
            path: {
                /**
                 * @description The unique identifier of a given admin
                 * @example 123
                 */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Admin found */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["admin"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
            /** @description Admin not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    listContentImportSources: {
        parameters: {
            query?: never;
            header?: {
                "Intercom-Version"?: components["schemas"]["intercom_version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description successful */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["content_import_sources_list"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    createContentImportSource: {
        parameters: {
            query?: never;
            header?: {
                "Intercom-Version"?: components["schemas"]["intercom_version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["create_content_import_source_request"];
            };
        };
        responses: {
            /** @description successful */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["content_import_source"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    getContentImportSource: {
        parameters: {
            query?: never;
            header?: {
                "Intercom-Version"?: components["schemas"]["intercom_version"];
            };
            path: {
                /** @description The unique identifier for the content import source which is given by Intercom. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description successful */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["content_import_source"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    updateContentImportSource: {
        parameters: {
            query?: never;
            header?: {
                "Intercom-Version"?: components["schemas"]["intercom_version"];
            };
            path: {
                /** @description The unique identifier for the content import source which is given by Intercom. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["update_content_import_source_request"];
            };
        };
        responses: {
            /** @description successful */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["content_import_source"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    deleteContentImportSource: {
        parameters: {
            query?: never;
            header?: {
                "Intercom-Version"?: components["schemas"]["intercom_version"];
            };
            path: {
                /** @description The unique identifier for the content import source which is given by Intercom. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description successful */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    listExternalPages: {
        parameters: {
            query?: never;
            header?: {
                "Intercom-Version"?: components["schemas"]["intercom_version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description successful */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["external_pages_list"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    createExternalPage: {
        parameters: {
            query?: never;
            header?: {
                "Intercom-Version"?: components["schemas"]["intercom_version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["create_external_page_request"];
            };
        };
        responses: {
            /** @description successful */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["external_page"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    getExternalPage: {
        parameters: {
            query?: never;
            header?: {
                "Intercom-Version"?: components["schemas"]["intercom_version"];
            };
            path: {
                /** @description The unique identifier for the external page which is given by Intercom. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description successful */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["external_page"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    updateExternalPage: {
        parameters: {
            query?: never;
            header?: {
                "Intercom-Version"?: components["schemas"]["intercom_version"];
            };
            path: {
                /** @description The unique identifier for the external page which is given by Intercom. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["update_external_page_request"];
            };
        };
        responses: {
            /** @description successful */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["external_page"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    deleteExternalPage: {
        parameters: {
            query?: never;
            header?: {
                "Intercom-Version"?: components["schemas"]["intercom_version"];
            };
            path: {
                /** @description The unique identifier for the external page which is given by Intercom. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description successful */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["external_page"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    listArticles: {
        parameters: {
            query?: never;
            header?: {
                "Intercom-Version"?: components["schemas"]["intercom_version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description successful */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["article_list"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    createArticle: {
        parameters: {
            query?: never;
            header?: {
                "Intercom-Version"?: components["schemas"]["intercom_version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["create_article_request"];
            };
        };
        responses: {
            /** @description article created */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["article"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    retrieveArticle: {
        parameters: {
            query?: never;
            header?: {
                "Intercom-Version"?: components["schemas"]["intercom_version"];
            };
            path: {
                /**
                 * @description The unique identifier for the article which is given by Intercom.
                 * @example 123
                 */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Article found */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["article"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
            /** @description Article not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    updateArticle: {
        parameters: {
            query?: never;
            header?: {
                "Intercom-Version"?: components["schemas"]["intercom_version"];
            };
            path: {
                /**
                 * @description The unique identifier for the article which is given by Intercom.
                 * @example 123
                 */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["update_article_request"];
            };
        };
        responses: {
            /** @description successful */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["article"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
            /** @description Article Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    deleteArticle: {
        parameters: {
            query?: never;
            header?: {
                "Intercom-Version"?: components["schemas"]["intercom_version"];
            };
            path: {
                /**
                 * @description The unique identifier for the article which is given by Intercom.
                 * @example 123
                 */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description successful */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["deleted_article_object"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
            /** @description Article Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    searchArticles: {
        parameters: {
            query?: {
                /**
                 * @description The phrase within your articles to search for.
                 * @example Getting started
                 */
                phrase?: string;
                /**
                 * @description The state of the Articles returned. One of `published`, `draft` or `all`.
                 * @example published
                 */
                state?: string;
                /**
                 * @description The ID of the Help Center to search in.
                 * @example 123
                 */
                help_center_id?: number;
                /**
                 * @description Return a highlighted version of the matching content within your articles. Refer to the response schema for more details.
                 * @example false
                 */
                highlight?: boolean;
            };
            header?: {
                "Intercom-Version"?: components["schemas"]["intercom_version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Search successful */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["article_search_response"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    listAllCollections: {
        parameters: {
            query?: never;
            header?: {
                "Intercom-Version"?: components["schemas"]["intercom_version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["collection_list"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    createCollection: {
        parameters: {
            query?: never;
            header?: {
                "Intercom-Version"?: components["schemas"]["intercom_version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["create_collection_request"];
            };
        };
        responses: {
            /** @description collection created */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["collection"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    retrieveCollection: {
        parameters: {
            query?: never;
            header?: {
                "Intercom-Version"?: components["schemas"]["intercom_version"];
            };
            path: {
                /**
                 * @description The unique identifier for the collection which is given by Intercom.
                 * @example 123
                 */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Collection found */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["collection"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
            /** @description Collection not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    updateCollection: {
        parameters: {
            query?: never;
            header?: {
                "Intercom-Version"?: components["schemas"]["intercom_version"];
            };
            path: {
                /**
                 * @description The unique identifier for the collection which is given by Intercom.
                 * @example 123
                 */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["update_collection_request"];
            };
        };
        responses: {
            /** @description successful */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["collection"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
            /** @description Collection Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    deleteCollection: {
        parameters: {
            query?: never;
            header?: {
                "Intercom-Version"?: components["schemas"]["intercom_version"];
            };
            path: {
                /**
                 * @description The unique identifier for the collection which is given by Intercom.
                 * @example 123
                 */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description successful */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["deleted_collection_object"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
            /** @description collection Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    retrieveHelpCenter: {
        parameters: {
            query?: never;
            header?: {
                "Intercom-Version"?: components["schemas"]["intercom_version"];
            };
            path: {
                /**
                 * @description The unique identifier for the collection which is given by Intercom.
                 * @example 123
                 */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Collection found */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["help_center"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
            /** @description Collection not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    listHelpCenters: {
        parameters: {
            query?: never;
            header?: {
                "Intercom-Version"?: components["schemas"]["intercom_version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Help Centers found */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["help_center_list"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    retrieveCompany: {
        parameters: {
            query: {
                filter: {
                    company_id: string;
                } | {
                    name: string;
                };
            };
            header?: {
                "Intercom-Version"?: components["schemas"]["intercom_version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["company"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
            /** @description Company Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    createOrUpdateCompany: {
        parameters: {
            query?: never;
            header?: {
                "Intercom-Version"?: components["schemas"]["intercom_version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["create_or_update_company_request"];
            };
        };
        responses: {
            /** @description Successful */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["company"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    RetrieveACompanyById: {
        parameters: {
            query?: never;
            header?: {
                "Intercom-Version"?: components["schemas"]["intercom_version"];
            };
            path: {
                /**
                 * @description The unique identifier for the company which is given by Intercom
                 * @example 5f4d3c1c-7b1b-4d7d-a97e-6095715c6632
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["company"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
            /** @description Company Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    UpdateCompany: {
        parameters: {
            query?: never;
            header?: {
                "Intercom-Version"?: components["schemas"]["intercom_version"];
            };
            path: {
                /**
                 * @description The unique identifier for the company which is given by Intercom
                 * @example 5f4d3c1c-7b1b-4d7d-a97e-6095715c6632
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["company"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
            /** @description Company Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    deleteCompany: {
        parameters: {
            query?: never;
            header?: {
                "Intercom-Version"?: components["schemas"]["intercom_version"];
            };
            path: {
                /**
                 * @description The unique identifier for the company which is given by Intercom
                 * @example 5f4d3c1c-7b1b-4d7d-a97e-6095715c6632
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["deleted_company_object"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
            /** @description Company Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    ListAttachedContacts: {
        parameters: {
            query?: never;
            header?: {
                "Intercom-Version"?: components["schemas"]["intercom_version"];
            };
            path: {
                /**
                 * @description The unique identifier for the company which is given by Intercom
                 * @example 5f4d3c1c-7b1b-4d7d-a97e-6095715c6632
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["company_attached_contacts"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
            /** @description Company Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    ListAttachedSegmentsForCompanies: {
        parameters: {
            query?: never;
            header?: {
                "Intercom-Version"?: components["schemas"]["intercom_version"];
            };
            path: {
                /**
                 * @description The unique identifier for the company which is given by Intercom
                 * @example 5f4d3c1c-7b1b-4d7d-a97e-6095715c6632
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["company_attached_segments"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
            /** @description Company Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    listAllCompanies: {
        parameters: {
            query: {
                /**
                 * @description what page of results to fetch. Defaults to first page
                 * @example first page
                 */
                page?: string;
                /**
                 * @description how many results per page. Defaults to 15
                 * @example 15
                 */
                per_page?: string;
                /**
                 * @description `asc` or `desc`. Return the companies in ascending or descending order. Defaults to desc
                 * @example desc
                 */
                order?: string;
                filter: {
                    tag_id: string;
                } | {
                    segment_id: string;
                };
            };
            header?: {
                "Intercom-Version"?: components["schemas"]["intercom_version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["company_list"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    scrollOverAllCompanies: {
        parameters: {
            query?: {
                scroll_param?: string;
            };
            header?: {
                "Intercom-Version"?: components["schemas"]["intercom_version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["company_scroll"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    listCompaniesForAContact: {
        parameters: {
            query?: never;
            header?: {
                "Intercom-Version"?: components["schemas"]["intercom_version"];
            };
            path: {
                /**
                 * @description The unique identifier for the contact which is given by Intercom
                 * @example 63a07ddf05a32042dffac965
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description successful */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["contact_attached_companies"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
            /** @description Contact not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    attachContactToACompany: {
        parameters: {
            query?: never;
            header?: {
                "Intercom-Version"?: components["schemas"]["intercom_version"];
            };
            path: {
                /** @description The unique identifier for the contact which is given by Intercom */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /**
                     * @description The unique identifier for the company which is given by Intercom
                     * @example 58a430d35458202d41b1e65b
                     */
                    id: string;
                };
            };
        };
        responses: {
            /** @description Successful */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["company"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
            /** @description Company Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    detachContactFromACompany: {
        parameters: {
            query?: never;
            header?: {
                "Intercom-Version"?: components["schemas"]["intercom_version"];
            };
            path: {
                /**
                 * @description The unique identifier for the contact which is given by Intercom
                 * @example 58a430d35458202d41b1e65b
                 */
                contact_id: string;
                /**
                 * @description The unique identifier for the company which is given by Intercom
                 * @example 58a430d35458202d41b1e65b
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["company"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
            /** @description Contact Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    listNotes: {
        parameters: {
            query?: never;
            header?: {
                "Intercom-Version"?: components["schemas"]["intercom_version"];
            };
            path: {
                /** @description The unique identifier of a contact. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["note_list"];
                };
            };
            /** @description Contact not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    createNote: {
        parameters: {
            query?: never;
            header?: {
                "Intercom-Version"?: components["schemas"]["intercom_version"];
            };
            path: {
                /**
                 * @description The unique identifier of a given contact.
                 * @example 123
                 */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /**
                     * @description The text of the note.
                     * @example New note
                     */
                    body: string;
                    /**
                     * @description The unique identifier of a given contact.
                     * @example 123
                     */
                    contact_id?: string;
                    /**
                     * @description The unique identifier of a given admin.
                     * @example 123
                     */
                    admin_id?: string;
                };
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["note"];
                };
            };
            /** @description Contact not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    listSegmentsForAContact: {
        parameters: {
            query?: never;
            header?: {
                "Intercom-Version"?: components["schemas"]["intercom_version"];
            };
            path: {
                /**
                 * @description The unique identifier for the contact which is given by Intercom
                 * @example 63a07ddf05a32042dffac965
                 */
                contact_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description successful */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["contact_segments"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
            /** @description Contact not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    listSubscriptionsForAContact: {
        parameters: {
            query?: never;
            header?: {
                "Intercom-Version"?: components["schemas"]["intercom_version"];
            };
            path: {
                /**
                 * @description The unique identifier for the contact which is given by Intercom
                 * @example 63a07ddf05a32042dffac965
                 */
                contact_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["subscription_type_list"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
            /** @description Contact not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    attachSubscriptionTypeToContact: {
        parameters: {
            query?: never;
            header?: {
                "Intercom-Version"?: components["schemas"]["intercom_version"];
            };
            path: {
                /**
                 * @description The unique identifier for the contact which is given by Intercom
                 * @example 63a07ddf05a32042dffac965
                 */
                contact_id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /**
                     * @description The unique identifier for the subscription which is given by Intercom
                     * @example 37846
                     */
                    id: string;
                    /**
                     * @description The consent_type of a subscription, opt_out or opt_in.
                     * @example opt_in
                     */
                    consent_type: string;
                };
            };
        };
        responses: {
            /** @description Successful */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["subscription_type"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
            /** @description Resource not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    detachSubscriptionTypeToContact: {
        parameters: {
            query?: never;
            header?: {
                "Intercom-Version"?: components["schemas"]["intercom_version"];
            };
            path: {
                /**
                 * @description The unique identifier for the contact which is given by Intercom
                 * @example 63a07ddf05a32042dffac965
                 */
                contact_id: string;
                /**
                 * @description The unique identifier for the subscription type which is given by Intercom
                 * @example 37846
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["subscription_type"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
            /** @description Resource not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    listTagsForAContact: {
        parameters: {
            query?: never;
            header?: {
                "Intercom-Version"?: components["schemas"]["intercom_version"];
            };
            path: {
                /**
                 * @description The unique identifier for the contact which is given by Intercom
                 * @example 63a07ddf05a32042dffac965
                 */
                contact_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description successful */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["tag_list"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
            /** @description Contact not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    attachTagToContact: {
        parameters: {
            query?: never;
            header?: {
                "Intercom-Version"?: components["schemas"]["intercom_version"];
            };
            path: {
                /**
                 * @description The unique identifier for the contact which is given by Intercom
                 * @example 63a07ddf05a32042dffac965
                 */
                contact_id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /**
                     * @description The unique identifier for the tag which is given by Intercom
                     * @example 7522907
                     */
                    id: string;
                };
            };
        };
        responses: {
            /** @description successful */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["tag"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
            /** @description Tag not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    detachTagFromContact: {
        parameters: {
            query?: never;
            header?: {
                "Intercom-Version"?: components["schemas"]["intercom_version"];
            };
            path: {
                /**
                 * @description The unique identifier for the contact which is given by Intercom
                 * @example 63a07ddf05a32042dffac965
                 */
                contact_id: string;
                /**
                 * @description The unique identifier for the tag which is given by Intercom
                 * @example 7522907
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description successful */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["tag"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
            /** @description Tag not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    ShowContact: {
        parameters: {
            query?: never;
            header?: {
                "Intercom-Version"?: components["schemas"]["intercom_version"];
            };
            path: {
                /**
                 * @description id
                 * @example 63a07ddf05a32042dffac965
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description successful */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["contact"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    UpdateContact: {
        parameters: {
            query?: never;
            header?: {
                "Intercom-Version"?: components["schemas"]["intercom_version"];
            };
            path: {
                /**
                 * @description id
                 * @example 63a07ddf05a32042dffac965
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["update_contact_request"];
            };
        };
        responses: {
            /** @description successful */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["contact"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    DeleteContact: {
        parameters: {
            query?: never;
            header?: {
                "Intercom-Version"?: components["schemas"]["intercom_version"];
            };
            path: {
                /** @description id */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description successful */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["contact_deleted"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    MergeContact: {
        parameters: {
            query?: never;
            header?: {
                "Intercom-Version"?: components["schemas"]["intercom_version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["merge_contacts_request"];
            };
        };
        responses: {
            /** @description successful */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["contact"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    SearchContacts: {
        parameters: {
            query?: never;
            header?: {
                "Intercom-Version"?: components["schemas"]["intercom_version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["search_request"];
            };
        };
        responses: {
            /** @description successful */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["contact_list"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    ListContacts: {
        parameters: {
            query?: never;
            header?: {
                "Intercom-Version"?: components["schemas"]["intercom_version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description successful */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["contact_list"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    CreateContact: {
        parameters: {
            query?: never;
            header?: {
                "Intercom-Version"?: components["schemas"]["intercom_version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["create_contact_request"];
            };
        };
        responses: {
            /** @description successful */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["contact"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    ArchiveContact: {
        parameters: {
            query?: never;
            header?: {
                "Intercom-Version"?: components["schemas"]["intercom_version"];
            };
            path: {
                /**
                 * @description id
                 * @example 63a07ddf05a32042dffac965
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description successful */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["contact_archived"];
                };
            };
        };
    };
    UnarchiveContact: {
        parameters: {
            query?: never;
            header?: {
                "Intercom-Version"?: components["schemas"]["intercom_version"];
            };
            path: {
                /**
                 * @description id
                 * @example 63a07ddf05a32042dffac965
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description successful */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["contact_unarchived"];
                };
            };
        };
    };
    attachTagToConversation: {
        parameters: {
            query?: never;
            header?: {
                "Intercom-Version"?: components["schemas"]["intercom_version"];
            };
            path: {
                /**
                 * @description conversation_id
                 * @example 64619700005694
                 */
                conversation_id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /**
                     * @description The unique identifier for the tag which is given by Intercom
                     * @example 7522907
                     */
                    id: string;
                    /**
                     * @description The unique identifier for the admin which is given by Intercom.
                     * @example 780
                     */
                    admin_id: string;
                };
            };
        };
        responses: {
            /** @description successful */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["tag"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
            /** @description Conversation not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    detachTagFromConversation: {
        parameters: {
            query?: never;
            header?: {
                "Intercom-Version"?: components["schemas"]["intercom_version"];
            };
            path: {
                /**
                 * @description conversation_id
                 * @example 64619700005694
                 */
                conversation_id: string;
                /**
                 * @description id
                 * @example 7522907
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /**
                     * @description The unique identifier for the admin which is given by Intercom.
                     * @example 123
                     */
                    admin_id: string;
                };
            };
        };
        responses: {
            /** @description successful */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["tag"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
            /** @description Tag not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    listConversations: {
        parameters: {
            query?: {
                /** @description How many results per page */
                per_page?: number;
                /** @description String used to get the next page of conversations. */
                starting_after?: string;
            };
            header?: {
                "Intercom-Version"?: components["schemas"]["intercom_version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description successful */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["paginated_response"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
            /** @description API plan restricted */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    createConversation: {
        parameters: {
            query?: never;
            header?: {
                "Intercom-Version"?: components["schemas"]["intercom_version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["create_conversation_request"];
            };
        };
        responses: {
            /** @description conversation created */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["message"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
            /** @description API plan restricted */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
            /** @description Contact Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    retrieveConversation: {
        parameters: {
            query?: {
                /**
                 * @description Set to plaintext to retrieve conversation messages in plain text.
                 * @example plaintext
                 */
                display_as?: string;
            };
            header?: {
                "Intercom-Version"?: components["schemas"]["intercom_version"];
            };
            path: {
                /**
                 * @description The id of the conversation to target
                 * @example 123
                 */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description conversation found */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["conversation"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
            /** @description API plan restricted */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    updateConversation: {
        parameters: {
            query?: {
                /**
                 * @description Set to plaintext to retrieve conversation messages in plain text.
                 * @example plaintext
                 */
                display_as?: string;
            };
            header?: {
                "Intercom-Version"?: components["schemas"]["intercom_version"];
            };
            path: {
                /**
                 * @description The id of the conversation to target
                 * @example 123
                 */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["update_conversation_request"];
            };
        };
        responses: {
            /** @description conversation found */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["conversation"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
            /** @description API plan restricted */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    deleteConversation: {
        parameters: {
            query?: never;
            header?: {
                "Intercom-Version"?: components["schemas"]["intercom_version"];
            };
            path: {
                /** @description id */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description successful */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["conversation_deleted"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
            /** @description API plan restricted */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    searchConversations: {
        parameters: {
            query?: never;
            header?: {
                "Intercom-Version"?: components["schemas"]["intercom_version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["search_request"];
            };
        };
        responses: {
            /** @description successful */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["conversation_list"];
                };
            };
        };
    };
    replyConversation: {
        parameters: {
            query?: never;
            header?: {
                "Intercom-Version"?: components["schemas"]["intercom_version"];
            };
            path: {
                id: string | "last";
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["reply_conversation_request"];
            };
        };
        responses: {
            /** @description User last conversation reply */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["conversation"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
            /** @description API plan restricted */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    manageConversation: {
        parameters: {
            query?: never;
            header?: {
                "Intercom-Version"?: components["schemas"]["intercom_version"];
            };
            path: {
                /**
                 * @description The identifier for the conversation as given by Intercom.
                 * @example 123
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["close_conversation_request"] | components["schemas"]["snooze_conversation_request"] | components["schemas"]["open_conversation_request"] | components["schemas"]["assign_conversation_request"];
            };
        };
        responses: {
            /** @description Assign a conversation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["conversation"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
            /** @description API plan restricted */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    autoAssignConversation: {
        parameters: {
            query?: never;
            header?: {
                "Intercom-Version"?: components["schemas"]["intercom_version"];
            };
            path: {
                /**
                 * @description The identifier for the conversation as given by Intercom.
                 * @example 123
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Assign a conversation using assignment rules */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["conversation"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
            /** @description API plan restricted */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    attachContactToConversation: {
        parameters: {
            query?: never;
            header?: {
                "Intercom-Version"?: components["schemas"]["intercom_version"];
            };
            path: {
                /**
                 * @description The identifier for the conversation as given by Intercom.
                 * @example 123
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["attach_contact_to_conversation_request"];
            };
        };
        responses: {
            /** @description Attach a contact to a conversation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["conversation"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
            /** @description API plan restricted */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    detachContactFromConversation: {
        parameters: {
            query?: never;
            header?: {
                "Intercom-Version"?: components["schemas"]["intercom_version"];
            };
            path: {
                /**
                 * @description The identifier for the conversation as given by Intercom.
                 * @example 123
                 */
                conversation_id: string;
                /**
                 * @description The identifier for the contact as given by Intercom.
                 * @example 123
                 */
                contact_id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["detach_contact_from_conversation_request"];
            };
        };
        responses: {
            /** @description Detach a contact from a group conversation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["conversation"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
            /** @description API plan restricted */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
            /** @description Contact not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
            /** @description Last customer */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    redactConversation: {
        parameters: {
            query?: never;
            header?: {
                "Intercom-Version"?: components["schemas"]["intercom_version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["redact_conversation_request"];
            };
        };
        responses: {
            /** @description Redact a conversation part */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["conversation"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    convertConversationToTicket: {
        parameters: {
            query?: never;
            header?: {
                "Intercom-Version"?: components["schemas"]["intercom_version"];
            };
            path: {
                /**
                 * @description The id of the conversation to target
                 * @example 123
                 */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["convert_conversation_to_ticket_request"];
            };
        };
        responses: {
            /** @description successful */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ticket"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    lisDataAttributes: {
        parameters: {
            query?: {
                /**
                 * @description Specify the data attribute model to return.
                 * @example company
                 */
                model?: "contact" | "company" | "conversation";
                /**
                 * @description Include archived attributes in the list. By default we return only non archived data attributes.
                 * @example false
                 */
                include_archived?: boolean;
            };
            header?: {
                "Intercom-Version"?: components["schemas"]["intercom_version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["data_attribute_list"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    createDataAttribute: {
        parameters: {
            query?: never;
            header?: {
                "Intercom-Version"?: components["schemas"]["intercom_version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["create_data_attribute_request"];
            };
        };
        responses: {
            /** @description Successful */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["data_attribute"];
                };
            };
            /** @description Too few options for list */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    updateDataAttribute: {
        parameters: {
            query?: never;
            header?: {
                "Intercom-Version"?: components["schemas"]["intercom_version"];
            };
            path: {
                /**
                 * @description The data attribute id
                 * @example 1
                 */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["update_data_attribute_request"];
            };
        };
        responses: {
            /** @description Successful */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["data_attribute"];
                };
            };
            /** @description Too few options in list */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
            /** @description Attribute Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
            /** @description Has Dependant Object */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    lisDataEvents: {
        parameters: {
            query: {
                filter: {
                    user_id: string;
                } | {
                    intercom_user_id: string;
                } | {
                    email: string;
                };
                /** @description The value must be user */
                type: string;
                /** @description summary flag */
                summary?: boolean;
            };
            header?: {
                "Intercom-Version"?: components["schemas"]["intercom_version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["data_event_summary"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    createDataEvent: {
        parameters: {
            query?: never;
            header?: {
                "Intercom-Version"?: components["schemas"]["intercom_version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["create_data_event_request"];
            };
        };
        responses: {
            /** @description successful */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    dataEventSummaries: {
        parameters: {
            query?: never;
            header?: {
                "Intercom-Version"?: components["schemas"]["intercom_version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["create_data_event_summaries_request"];
            };
        };
        responses: {
            /** @description successful */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    createDataExport: {
        parameters: {
            query?: never;
            header?: {
                "Intercom-Version"?: components["schemas"]["intercom_version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["create_data_exports_request"];
            };
        };
        responses: {
            /** @description successful */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["data_export"];
                };
            };
        };
    };
    getDataExport: {
        parameters: {
            query?: never;
            header?: {
                "Intercom-Version"?: components["schemas"]["intercom_version"];
            };
            path: {
                /** @description job_identifier */
                job_identifier: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description successful */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["data_export"];
                };
            };
        };
    };
    cancelDataExport: {
        parameters: {
            query?: never;
            header?: {
                "Intercom-Version"?: components["schemas"]["intercom_version"];
            };
            path: {
                /** @description job_identifier */
                job_identifier: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description successful */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["data_export"];
                };
            };
        };
    };
    downloadDataExport: {
        parameters: {
            query?: never;
            header?: {
                "Intercom-Version"?: components["schemas"]["intercom_version"];
            };
            path: {
                /** @description job_identifier */
                job_identifier: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description successful */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    createMessage: {
        parameters: {
            query?: never;
            header?: {
                "Intercom-Version"?: components["schemas"]["intercom_version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["create_message_request"];
            };
        };
        responses: {
            /** @description admin message created */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["message"];
                };
            };
            /** @description No body supplied for email message */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
            /** @description API plan restricted */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
            /** @description No subject supplied for email message */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    listNewsItems: {
        parameters: {
            query?: never;
            header?: {
                "Intercom-Version"?: components["schemas"]["intercom_version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description successful */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["paginated_response"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    createNewsItem: {
        parameters: {
            query?: never;
            header?: {
                "Intercom-Version"?: components["schemas"]["intercom_version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["news_item_request"];
            };
        };
        responses: {
            /** @description successful */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["news_item"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    retrieveNewsItem: {
        parameters: {
            query?: never;
            header?: {
                "Intercom-Version"?: components["schemas"]["intercom_version"];
            };
            path: {
                /**
                 * @description The unique identifier for the news item which is given by Intercom.
                 * @example 123
                 */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description successful */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["news_item"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
            /** @description News Item Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    updateNewsItem: {
        parameters: {
            query?: never;
            header?: {
                "Intercom-Version"?: components["schemas"]["intercom_version"];
            };
            path: {
                /**
                 * @description The unique identifier for the news item which is given by Intercom.
                 * @example 123
                 */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["news_item_request"];
            };
        };
        responses: {
            /** @description successful */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["news_item"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
            /** @description News Item Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    deleteNewsItem: {
        parameters: {
            query?: never;
            header?: {
                "Intercom-Version"?: components["schemas"]["intercom_version"];
            };
            path: {
                /**
                 * @description The unique identifier for the news item which is given by Intercom.
                 * @example 123
                 */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description successful */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["deleted_object"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
            /** @description News Item Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    listLiveNewsfeedItems: {
        parameters: {
            query?: never;
            header?: {
                "Intercom-Version"?: components["schemas"]["intercom_version"];
            };
            path: {
                /**
                 * @description The unique identifier for the news feed item which is given by Intercom.
                 * @example 123
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description successful */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["paginated_response"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    listNewsfeeds: {
        parameters: {
            query?: never;
            header?: {
                "Intercom-Version"?: components["schemas"]["intercom_version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description successful */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["paginated_response"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    retrieveNewsfeed: {
        parameters: {
            query?: never;
            header?: {
                "Intercom-Version"?: components["schemas"]["intercom_version"];
            };
            path: {
                /**
                 * @description The unique identifier for the news feed item which is given by Intercom.
                 * @example 123
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description successful */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["newsfeed"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    retrieveNote: {
        parameters: {
            query?: never;
            header?: {
                "Intercom-Version"?: components["schemas"]["intercom_version"];
            };
            path: {
                /**
                 * @description The unique identifier of a given note
                 * @example 1
                 */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Note found */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["note"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
            /** @description Note not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    listSegments: {
        parameters: {
            query?: {
                /**
                 * @description It includes the count of contacts that belong to each segment.
                 * @example true
                 */
                include_count?: boolean;
            };
            header?: {
                "Intercom-Version"?: components["schemas"]["intercom_version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["segment_list"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    retrieveSegment: {
        parameters: {
            query?: never;
            header?: {
                "Intercom-Version"?: components["schemas"]["intercom_version"];
            };
            path: {
                /**
                 * @description The unique identified of a given segment.
                 * @example 123
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["segment"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
            /** @description Segment not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    listSubscriptionTypes: {
        parameters: {
            query?: never;
            header?: {
                "Intercom-Version"?: components["schemas"]["intercom_version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["subscription_type_list"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    createPhoneSwitch: {
        parameters: {
            query?: never;
            header?: {
                "Intercom-Version"?: components["schemas"]["intercom_version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["create_phone_switch_request"];
            };
        };
        responses: {
            /** @description successful */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["phone_switch"];
                };
            };
            /** @description bad request - invalid number */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
            /** @description unprocessable entity */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    listTags: {
        parameters: {
            query?: never;
            header?: {
                "Intercom-Version"?: components["schemas"]["intercom_version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description successful */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["tag_list"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    createTag: {
        parameters: {
            query?: never;
            header?: {
                "Intercom-Version"?: components["schemas"]["intercom_version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["create_or_update_tag_request"] | components["schemas"]["tag_company_request"] | components["schemas"]["untag_company_request"] | components["schemas"]["tag_multiple_users_request"];
            };
        };
        responses: {
            /** @description Action successful */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["tag"];
                };
            };
            /** @description Invalid parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
            /** @description User  not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    findTag: {
        parameters: {
            query?: never;
            header?: {
                "Intercom-Version"?: components["schemas"]["intercom_version"];
            };
            path: {
                /**
                 * @description The unique identifier of a given tag
                 * @example 123
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Tag found */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["tag"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
            /** @description Tag not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    deleteTag: {
        parameters: {
            query?: never;
            header?: {
                "Intercom-Version"?: components["schemas"]["intercom_version"];
            };
            path: {
                /**
                 * @description The unique identifier of a given tag
                 * @example 123
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Tag has dependent objects */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
            /** @description Resource not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    listTeams: {
        parameters: {
            query?: never;
            header?: {
                "Intercom-Version"?: components["schemas"]["intercom_version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description successful */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["team_list"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    retrieveTeam: {
        parameters: {
            query?: never;
            header?: {
                "Intercom-Version"?: components["schemas"]["intercom_version"];
            };
            path: {
                /**
                 * @description The unique identifier of a given team.
                 * @example 123
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description successful */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["team"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
            /** @description Team not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    createTicketTypeAttribute: {
        parameters: {
            query?: never;
            header?: {
                "Intercom-Version"?: components["schemas"]["intercom_version"];
            };
            path: {
                /** @description The unique identifier for the ticket type which is given by Intercom. */
                ticket_type_id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["create_ticket_type_attribute_request"];
            };
        };
        responses: {
            /** @description Ticket Type Attribute created */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ticket_type_attribute"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    updateTicketTypeAttribute: {
        parameters: {
            query?: never;
            header?: {
                "Intercom-Version"?: components["schemas"]["intercom_version"];
            };
            path: {
                /** @description The unique identifier for the ticket type which is given by Intercom. */
                ticket_type_id: string;
                /** @description The unique identifier for the ticket type attribute which is given by Intercom. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["update_ticket_type_attribute_request"];
            };
        };
        responses: {
            /** @description Ticket Type Attribute updated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ticket_type_attribute"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    listTicketTypes: {
        parameters: {
            query?: never;
            header?: {
                "Intercom-Version"?: components["schemas"]["intercom_version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description successful */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ticket_type_list"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    createTicketType: {
        parameters: {
            query?: never;
            header?: {
                "Intercom-Version"?: components["schemas"]["intercom_version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["create_ticket_type_request"];
            };
        };
        responses: {
            /** @description Ticket type created */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ticket_type"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    getTicketType: {
        parameters: {
            query?: never;
            header?: {
                "Intercom-Version"?: components["schemas"]["intercom_version"];
            };
            path: {
                /** @description The unique identifier for the ticket type which is given by Intercom. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ticket type found */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ticket_type"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    updateTicketType: {
        parameters: {
            query?: never;
            header?: {
                "Intercom-Version"?: components["schemas"]["intercom_version"];
            };
            path: {
                /** @description The unique identifier for the ticket type which is given by Intercom. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["update_ticket_type_request"];
            };
        };
        responses: {
            /** @description Ticket type updated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ticket_type"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    replyTicket: {
        parameters: {
            query?: never;
            header?: {
                "Intercom-Version"?: components["schemas"]["intercom_version"];
            };
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["create_ticket_reply_with_comment_request"];
            };
        };
        responses: {
            /** @description Admin quick_reply reply */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ticket_reply"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    attachTagToTicket: {
        parameters: {
            query?: never;
            header?: {
                "Intercom-Version"?: components["schemas"]["intercom_version"];
            };
            path: {
                /**
                 * @description ticket_id
                 * @example 64619700005694
                 */
                ticket_id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /**
                     * @description The unique identifier for the tag which is given by Intercom
                     * @example 7522907
                     */
                    id: string;
                    /**
                     * @description The unique identifier for the admin which is given by Intercom.
                     * @example 780
                     */
                    admin_id: string;
                };
            };
        };
        responses: {
            /** @description successful */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["tag"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
            /** @description Ticket not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    detachTagFromTicket: {
        parameters: {
            query?: never;
            header?: {
                "Intercom-Version"?: components["schemas"]["intercom_version"];
            };
            path: {
                /**
                 * @description ticket_id
                 * @example 64619700005694
                 */
                ticket_id: string;
                /**
                 * @description The unique identifier for the tag which is given by Intercom
                 * @example 7522907
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /**
                     * @description The unique identifier for the admin which is given by Intercom.
                     * @example 123
                     */
                    admin_id: string;
                };
            };
        };
        responses: {
            /** @description successful */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["tag"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
            /** @description Tag not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    createTicket: {
        parameters: {
            query?: never;
            header?: {
                "Intercom-Version"?: components["schemas"]["intercom_version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["create_ticket_request"];
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ticket"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    getTicket: {
        parameters: {
            query?: never;
            header?: {
                "Intercom-Version"?: components["schemas"]["intercom_version"];
            };
            path: {
                /** @description The unique identifier for the ticket which is given by Intercom. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ticket found */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ticket"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    updateTicket: {
        parameters: {
            query?: never;
            header?: {
                "Intercom-Version"?: components["schemas"]["intercom_version"];
            };
            path: {
                /** @description The unique identifier for the ticket which is given by Intercom */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["update_ticket_request"];
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ticket"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
            /** @description Assignee not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    searchTickets: {
        parameters: {
            query?: never;
            header?: {
                "Intercom-Version"?: components["schemas"]["intercom_version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["search_request"];
            };
        };
        responses: {
            /** @description successful */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ticket_list"];
                };
            };
        };
    };
    retrieveVisitorWithUserId: {
        parameters: {
            query: {
                /** @description The user_id of the Visitor you want to retrieve. */
                user_id: string;
            };
            header?: {
                "Intercom-Version"?: components["schemas"]["intercom_version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description successful */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["visitor"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
            /** @description Visitor not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    updateVisitor: {
        parameters: {
            query?: never;
            header?: {
                "Intercom-Version"?: components["schemas"]["intercom_version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["update_visitor_request"];
            };
        };
        responses: {
            /** @description successful */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["visitor"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
            /** @description visitor Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    retrieveVisitor: {
        parameters: {
            query?: never;
            header?: {
                "Intercom-Version"?: components["schemas"]["intercom_version"];
            };
            path: {
                /**
                 * @description Id provided by Intercom.
                 * @example 5e1c4c1c-7b1e-4b5d-8c1c-5e1c4c1c7b1e
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description successful */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["visitor"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
            /** @description Visitor not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    deleteVisitor: {
        parameters: {
            query?: never;
            header?: {
                "Intercom-Version"?: components["schemas"]["intercom_version"];
            };
            path: {
                /**
                 * @description Id provided by Intercom.
                 * @example 5e1c4c1c-7b1e-4b5d-8c1c-5e1c4c1c7b1e
                 */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description successful */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["visitor_deleted_object"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
            /** @description Visitor Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
    convertVisitor: {
        parameters: {
            query?: never;
            header?: {
                "Intercom-Version"?: components["schemas"]["intercom_version"];
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["convert_visitor_request"];
            };
        };
        responses: {
            /** @description successful */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["contact"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["error"];
                };
            };
        };
    };
}
